
 afxDebug_w32.c:394
  AfxAttachDebugTerminal()
      ::::::::  :::       :::     :::     :::::::::  :::::::::   ::::::::      
     :+:    :+: :+:       :+:   :+: :+:   :+:    :+: :+:    :+: :+:    :+:     
     +:+    +:+ +:+       +:+  +:+   +:+  +:+    +:+ +:+    +:+ +:+    +:+     
     +#+    +:+ +#+  +:+  +#+ +#++:++#++: +#+    +:+ +#++:++#:  +#+    +:+     
     +#+  # +#+ +#+ +#+#+ +#+ +#+     +#+ +#+    +#+ +#+    +#+ +#+    +#+     
     #+#   +#+   #+#+# #+#+#  #+#     #+# #+#    #+# #+#    #+# #+#    #+#     
      ###### ###  ###   ###   ###     ### #########  ###    ###  ########      
                                                                               
              Q W A D R O   E X E C U T I O N   E C O S Y S T E M              
                                                                               
                               Public Test Build                               
                            (c) 2017 SIGMA/Engitech                            
                                www.sigmaco.org                                
                                                                               
 Installing Qwadro Execution Ecosystem at 0f1e0728...
 afxClass<Qwadro Execution Ecosystem>::ConstructObject(004e0220)
 afxSystem_w32.c:317
  _AfxSysCtor(sys=004e0220)
 ERR afxInitialization.c:206?AfxIniLoadFromFile
  1: Section 'BasedOn="E:\qwadro\afx"' missing ']' operator.
 Installing Thread Execution Unit at 004e1960 by 004e1268...
 Entering the Thread Execution Environment 6152
 afxClass<Thread Execution Unit>::ConstructObject(004b3930)
 afxTxu_w32.c:399
  _AfxTxuCtor(004b3930)
 Installing Memory Management Unit at 004e127c by 004e1268...
 Installing Thread at 004e189c by 004e1268...
 Installing Device at 004e1a24 by 004e1268...
 Installing Autonomous Service at 004e1ae8 by 004e1268...
 Installing File at 004e1d34 by 004e1268...
 Installing I/O Stream at 004e1bac by 004e1268...
 Installing Codec at 004e1c70 by 004e1268...
 Installing File Archive at 004e1df8 by 004e1268 over 004e1d34...
 Installing Executable & Linkable File at 004e1404 by 004e1268...
 Installing Installable Client Driver at 004e14c8 by 004e1268 over 004e1404...
 Installing File System at 004e1ebc by 004e1268...
 Installing Application at 004e2044 by 004e1268...
 Installing Human Input Device at 004e158c by 004e1268 over 004e1a24...
 Installing Keyboard at 004e1650 by 004e1268 over 004e158c...
 Installing Mouse at 004e1714 by 004e1268 over 004e158c...
 Installing Controller at 004e17d8 by 004e1268 over 004e158c...
 Installing String Catalog at 004e1340 by 004e1268...
 Installing Simulation at 004e1f80 by 004e1268...
 [!] afxSystem_w32.c:495?_AfxSysCtor
  Memory page size: 4096
 [!] afxSystem_w32.c:496?_AfxSysCtor
  Logical processor count: 1
 afxClass<Memory Management Unit>::ConstructObject(004e2270)
 afxArena.c:768
  AfxAllocateArena(aren=004e2174)
 afxArena.c:769
  AfxAllocateArena(spec=00000000,hint="afxSystem_w32.c:509!_AfxSysCtor")
 afxClass<File System>::ConstructObject(004e3f30)
 Storage point "." 5 mounted -> "E:\qwadro\afx\\\".
 afxClass<File System>::ConstructObject(004e3fb8)
 Storage point "system" 5 mounted -> "E:\qwadro\afx\\system\".
 afxClass<File System>::ConstructObject(004e4040)
 Storage point "system" 5 mounted -> "E:\qwadro\afx\\system32w\".
 afxClass<File System>::ConstructObject(004e40c8)
 Storage point "system" 5 mounted -> "E:\qwadro\afx\\system32wd\".
 afxClass<File System>::ConstructObject(004e4150)
 Storage point "code" 5 mounted -> "E:\qwadro\afx\\code\".
 afxClass<File System>::ConstructObject(004e41d8)
 Storage point "sound" 5 mounted -> "E:\qwadro\afx\\sound\".
 afxClass<File System>::ConstructObject(004e42b0)
 Storage point "data" 5 mounted -> "E:\qwadro\afx\\data\".
 afxClass<File System>::ConstructObject(004e4338)
 Storage point "art" 5 mounted -> "E:\qwadro\afx\\art\".
 afxClass<File System>::ConstructObject(004e43c0)
 Storage point "tmp" 7 mounted -> "E:\qwadro\afx\\tmp\".
 afxExecutable.c:243
  AfxLoadExecutables(cnt=1,executables=004e2144,uri=0022d8d8)
 afxClass<Executable & Linkable File>::ConstructObject(004e57a0)
 afxExecutable.c:153
  _AfxExeCtor(uri:system/e2coree.dll)
 /qwadro/afx//system32wd//e2coree.dll
 afxKeyboard.c:290
  AfxAcquireKeyboards(cnt=1,port=0022d71c,keyboards=004e2148)
 afxClass<Keyboard, Human Input Device>ConstructingObject(004e5a20)
 afxClass<Human Input Device, Device>ConstructingObject(004e5a20)
 afxClass<Device>::ConstructObject(004e5a20)
 afxClass<Human Input Device>::ConstructObject(004e5a20)
 afxClass<Keyboard>::ConstructObject(004e5a20)
 afxKeyboard.c:241
  _AfxKbdCtor(kbd=004e5a20)
 afxSoundSystem.c:127
  _AfxSsysCtor(ssys=004e6350)
 Installing Sound Device at 004e636c by 004e6358 over 004e1a24...
 Installing Sound Context at 004e6430 by 004e6358...
 Installing Sound Thread at 004e64f4 by 004e6358 over 004e189c...
 Loading draw ICD system/e2sound.icd
 afxClass<Installable Client Driver, Executable & Linkable File>ConstructingObject(004e6630)
 afxClass<Executable & Linkable File>::ConstructObject(004e6630)
 afxExecutable.c:153
  _AfxExeCtor(uri:system/e2sound.icd)
 /qwadro/afx//system32wd//e2sound.icd
 afxClass<Installable Client Driver>::ConstructObject(004e6630)
 ERR afxUri.c:619?AfxExcerptUriFile
  
 ERR afxUri.c:619?AfxExcerptUriFile
  (uri)
    Invalid
 ERR afxBufferedString.c:414?AfxExcerptBufferedString
  
 ERR afxBufferedString.c:414?AfxExcerptBufferedString
  (str)
    Invalid
 ERR afxString.c:45?AfxGetStringLength
  
 ERR afxString.c:45?AfxGetStringLength
  (str)
    Invalid
 ERR afxString.c:32?AfxGetStringData
  
 ERR afxString.c:32?AfxGetStringData
  (str)
    Invalid
 ERR afxUri.c:453?AfxGetUriString
  
 ERR afxUri.c:453?AfxGetUriString
  (uri)
    Invalid
 ERR afxUri.c:453?AfxGetUriString
  
 ERR afxUri.c:453?AfxGetUriString
  (uri)
    Invalid
 ERR afxString.c:32?AfxGetStringData
  
 ERR afxString.c:32?AfxGetStringData
  (str)
    Invalid
 ERR afxUri.c:453?AfxGetUriString
  
 ERR afxUri.c:453?AfxGetUriString
  (uri)
    Invalid
 ERR afxUri.c:453?AfxGetUriString
  
 ERR afxUri.c:453?AfxGetUriString
  (uri)
    Invalid
 ERR afxString.c:45?AfxGetStringLength
  
 ERR afxString.c:45?AfxGetStringLength
  (str)
    Invalid
Installing 'U‰åSVƒìl‹E‹M‹”ò1ê‰UôÇEÀ' ICD on sound system...
	A4D --- Qwadro Execution Ecosystem 0.7.2
	Vendor: SIGMA Technology Group <www.sigmaco.org>
	Note: 
       ::::::::    :::::::::::    ::::::::    ::::     ::::       :::          
      :+:    :+:       :+:       :+:    :+:   +:+:+: :+:+:+     :+: :+:        
      +:+              +:+       +:+          +:+ +:+:+ +:+    +:+   +:+       
      +#++:++#++       +#+       :#:          +#+  +:+  +#+   +#++:++#++:      
             +#+       +#+       +#+   +#+#   +#+       +#+   +#+     +#+      
      #+#    #+#       #+#       #+#    #+#   #+#       #+#   #+#     #+#      
       ########    ###########    ########    ###       ###   ###     ###      
                                                                               
              Q W A D R O   E X E C U T I O N   E C O S Y S T E M              
                                                                               
                               Public Test Build                               
              (c) 2017 SIGMA Technology Group --- Federacao SIGMA              
                                www.sigmaco.org                                
                                                                               
 Installing Sound Device at 004e6734 by 004e6720 over 004e636c...
 afxClass<Sound Device, Sound Device>ConstructingObject(004e6c20)
 afxClass<Sound Device, Device>ConstructingObject(004e6c20)
 afxClass<Device>::ConstructObject(004e6c20)
 afxClass<Sound Device>::ConstructObject(004e6c20)
 afxClass<Sound Device>::ConstructObject(004e6c20)
 salSdev.c:419
  _SalSdevCtor(sdev=004e6c20)
 Installing Sound Context at 004e6d0c by 004e6cf8 over 004e6430...
 0  - Generic Software
 Listing devices available with ALC_ENUMERATE_ALL_EXT
 0  - Generic Software on Alto-falantes (2- USB Audio Device)
 1  - Generic Software on Alto-falantes (VIA HD Audio(Compatible))
 2  - Generic Software on Headphone (VIA HD Audio(Compatible))
 Listing available capture devices:
 0  - Mixagem estéreo (VIA HD Audio(C
 1  - Microfone (VIA HD Audio(Compati
 2  - Microfone (2- USB Audio Device)
 000 alEnable core found.
 001 alDisable core found.
 002 alIsEnabled core found.
 003 alGetString core found.
 004 alGetBooleanv core found.
 005 alGetIntegerv core found.
 006 alGetFloatv core found.
 007 alGetDoublev core found.
 008 alGetBoolean core found.
 009 alGetInteger core found.
 010 alGetFloat core found.
 011 alGetDouble core found.
 012 alGetError core found.
 013 alIsExtensionPresent core found.
 014 alGetProcAddress core found.
 015 alGetEnumValue core found.
 016 alListenerf core found.
 017 alListener3f core found.
 018 alListenerfv core found.
 019 alListeneri core found.
 020 alListener3i core found.
 021 alListeneriv core found.
 022 alGetListenerf core found.
 023 alGetListener3f core found.
 024 alGetListenerfv core found.
 025 alGetListeneri core found.
 026 alGetListener3i core found.
 027 alGetListeneriv core found.
 028 alGenSources core found.
 029 alDeleteSources core found.
 030 alIsSource core found.
 031 alSourcef core found.
 032 alSource3f core found.
 033 alSourcefv core found.
 034 alSourcei core found.
 035 alSource3i core found.
 036 alSourceiv core found.
 037 alGetSourcef core found.
 038 alGetSource3f core found.
 039 alGetSourcefv core found.
 040 alGetSourcei core found.
 041 alGetSource3i core found.
 042 alGetSourceiv core found.
 043 alSourcePlayv core found.
 044 alSourceStopv core found.
 045 alSourceRewindv core found.
 046 alSourcePausev core found.
 047 alSourcePlay core found.
 048 alSourceStop core found.
 049 alSourceRewind core found.
 050 alSourcePause core found.
 051 alSourceQueueBuffers core found.
 052 alSourceUnqueueBuffers core found.
 053 alGenBuffers core found.
 054 alDeleteBuffers core found.
 055 alIsBuffer core found.
 056 alBufferData core found.
 057 alBufferf core found.
 058 alBuffer3f core found.
 059 alBufferfv core found.
 060 alBufferi core found.
 061 alBuffer3i core found.
 062 alBufferiv core found.
 063 alGetBufferf core found.
 064 alGetBuffer3f core found.
 065 alGetBufferfv core found.
 066 alGetBufferi core found.
 067 alGetBuffer3i core found.
 068 alGetBufferiv core found.
 afxClass<File>::ConstructObject(00520ae0)
 /qwadro/afx//sound//qwadroDeepNote44kHz
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(00523210)
 ERR afxStream.c:320?AfxMeasureStream
  
 ERR afxStream.c:320?AfxMeasureStream
  (((((afxFlags)(ios->flags)) & ((afxFlags)(afxIoFlag_X))) == (afxFlags)(afxIoFlag_X)))
    Invalid
 Dismantling File object (#0) 00520ae0...
 Destructing instance 00520ae0 of File class.
 Dismantling I/O Stream object (#0) 00523210...
 Destructing instance 00523210 of I/O Stream class.Sound device '
                         :::           :::       :::::::::                     
                       :+: :+:        :+:        :+:    :+:                    
                      +:+   +:+      +:+ +:+     +:+    +:+                    
                     +#++:++#++:    +#+  +:+     +#+    +:+                    
                     +#+     +#+   +#+#+#+#+#+   +#+    +#+                    
                     #+#     #+#         #+#     #+#    #+#                    
                     ###     ###         ###     #########                     
                                                                               
              Q W A D R O   E X E C U T I O N   E C O S Y S T E M              
                                                                               
                               Public Test Build                               
              (c) 2017 SIGMA Technology Group --- Federacao SIGMA              
                                www.sigmaco.org                                
                                                                               ' <'a4d'> registered on sound system
 afxSoundThread.c:171
  AfxAcquireSoundThreads(cnt=1,config=0022d3fc,sthr=0022d4f8)
 afxClass<Sound Thread, Thread>ConstructingObject(00520ae0)
 afxClass<Thread>::ConstructObject(00520ae0)
 afxThread.c:263
  _AfxThrCtor(00520ae0)
 afxClass<Sound Thread>::ConstructObject(00520ae0)
 afxSoundThread.c:128
  _AfxSthrCtor(sthr=00520ae0)
 afxThread.c:204
  AfxRunThread(thr=00520ae0)
 afxDrawSystem.c:233
  _AfxDsysCtor(dsys=005231e0)
 Installing Draw Device at 005236e8 by 0052323c over 004e1a24...
 Installing Draw Context at 00523314 by 0052323c...
 Installing Draw Output at 0052349c by 0052323c...
 Installing Draw Input at 00523624 by 0052323c...
 Installing Draw Thread at 00523250 by 0052323c over 004e189c...
 Loading draw ICD system/e2draw.icd
 afxClass<Installable Client Driver, Executable & Linkable File>ConstructingObject(004e6864)
 afxClass<Executable & Linkable File>::ConstructObject(004e6864)
 afxExecutable.c:153
  _AfxExeCtor(uri:system/e2draw.icd)
 /qwadro/afx//system32wd//e2draw.icd
 afxClass<Installable Client Driver>::ConstructObject(004e6864)
Installing 'e2draw.icd' ICD on draw system...
	OpenGL/Vulkan Continuous Integration --- SIGMA GL/2 --- Qwadro Execution Ecosystem 0.7.2
	Vendor: SIGMA Technology Group <www.sigmaco.org>
	Note: 
       ::::::::    :::::::::::    ::::::::    ::::     ::::       :::          
      :+:    :+:       :+:       :+:    :+:   +:+:+: :+:+:+     :+: :+:        
      +:+              +:+       +:+          +:+ +:+:+ +:+    +:+   +:+       
      +#++:++#++       +#+       :#:          +#+  +:+  +#+   +#++:++#++:      
             +#+       +#+       +#+   +#+#   +#+       +#+   +#+     +#+      
      #+#    #+#       #+#       #+#    #+#   #+#       #+#   #+#     #+#      
       ########    ###########    ########    ###       ###   ###     ###      
                                                                               
              Q W A D R O   E X E C U T I O N   E C O S Y S T E M              
                                                                               
                               Public Test Build                               
              (c) 2017 SIGMA Technology Group --- Federacao SIGMA              
                                www.sigmaco.org                                
                                                                               
 Installing Draw Device at 004e6968 by 004e6954 over 005236e8...
 afxClass<Draw Device, Draw Device>ConstructingObject(00523b00)
 afxClass<Draw Device, Device>ConstructingObject(00523b00)
 afxClass<Device>::ConstructObject(00523b00)
 afxClass<Draw Device>::ConstructObject(00523b00)
 afxClass<Draw Device>::ConstructObject(00523b00)
 sglDdrv_w32.c:2664
  _SglDdevCtor(ddev=00523b00)
 Listing mem available display devices...

 #0 = Intel(R) HD Graphics (\\.\DISPLAY1) 8080005
 #1 = RDPDD Chained DD (\\.\DISPLAYV1) 200008
 #2 = RDP Encoder Mirror Driver (\\.\DISPLAYV2) 200008
 #3 = RDP Reflector Display Driver (\\.\DISPLAYV3) 200008
 afxMutex.c:24
  AfxTakeMutex(mtx=0052412c,type=00000000)
 Created. (mtx)0052412c
 Installing Draw Script at 005242ac by 00523bd8...
 Installing Draw Queue at 005241e8 by 00523bd8...
 Installing Draw Context at 00523bec by 00523bd8 over 00523314...
 Installing Draw Output at 00523cb0 by 00523bd8 over 0052349c...
 Installing Draw Input at 00523d74 by 00523bd8 over 00523624...
 Creating transient OpenGL context
 000 wglCreateContextAttribsARB core found.
 000 wglChoosePixelFormatARB core found.
 000 wglSwapIntervalEXT core found.
 000 wglGetExtensionsStringARB core found.
 Creating definitive OpenGL context
 000 wglCreateContextAttribsARB core found.
 000 wglChoosePixelFormatARB core found.
 000 wglSwapIntervalEXT core found.
 000 wglGetExtensionsStringARB core found.
 000 glCullFace core found.
 001 glFrontFace core found.
 002 glHint core found.
 003 glLineWidth core found.
 004 glPointSize core found.
 005 glPolygonMode core found.
 006 glScissor core found.
 007 glTexParameterf core found.
 008 glTexParameterfv core found.
 009 glTexParameteri core found.
 010 glTexParameteriv core found.
 011 glTexImage1D core found.
 012 glTexImage2D core found.
 013 glDrawBuffer core found.
 014 glClear core found.
 015 glClearColor core found.
 016 glClearStencil core found.
 017 glClearDepth core found.
 018 glStencilMask core found.
 019 glColorMask core found.
 020 glDepthMask core found.
 021 glDisable core found.
 022 glEnable core found.
 023 glFinish core found.
 024 glFlush core found.
 025 glBlendFunc core found.
 026 glLogicOp core found.
 027 glStencilFunc core found.
 028 glStencilOp core found.
 029 glDepthFunc core found.
 030 glPixelStoref core found.
 031 glPixelStorei core found.
 032 glReadBuffer core found.
 033 glReadPixels core found.
 034 glGetBooleanv core found.
 035 glGetDoublev core found.
 036 glGetError core found.
 037 glGetFloatv core found.
 038 glGetIntegerv core found.
 039 glGetString core found.
 040 glGetTexImage core found.
 041 glGetTexParameterfv core found.
 042 glGetTexParameteriv core found.
 043 glGetTexLevelParameterfv core found.
 044 glGetTexLevelParameteriv core found.
 045 glIsEnabled core found.
 046 glDepthRange core found.
 047 glViewport core found.
 048 glDrawArrays core found.
 049 glDrawElements core found.
 050 glGetPointerv core found.
 051 glPolygonOffset core found.
 052 glCopyTexImage1D core found.
 053 glCopyTexImage2D core found.
 054 glCopyTexSubImage1D core found.
 055 glCopyTexSubImage2D core found.
 056 glTexSubImage1D core found.
 057 glTexSubImage2D core found.
 058 glBindTexture core found.
 059 glDeleteTextures core found.
 060 glGenTextures core found.
 061 glIsTexture core found.
 062 glDrawRangeElements core found.
 063 glTexImage3D core found.
 064 glTexSubImage3D core found.
 065 glCopyTexSubImage3D core found.
 066 glActiveTexture core found.
 067 glSampleCoverage core found.
 068 glCompressedTexImage3D core found.
 069 glCompressedTexImage2D core found.
 070 glCompressedTexImage1D core found.
 071 glCompressedTexSubImage3D core found.
 072 glCompressedTexSubImage2D core found.
 073 glCompressedTexSubImage1D core found.
 074 glGetCompressedTexImage core found.
 075 glBlendFuncSeparate core found.
 076 glMultiDrawArrays core found.
 077 glMultiDrawElements core found.
 078 glPointParameterf core found.
 079 glPointParameterfv core found.
 080 glPointParameteri core found.
 081 glPointParameteriv core found.
 082 glBlendColor core found.
 083 glBlendEquation core found.
 084 glGenQueries core found.
 085 glDeleteQueries core found.
 086 glIsQuery core found.
 087 glBeginQuery core found.
 088 glEndQuery core found.
 089 glGetQueryiv core found.
 090 glGetQueryObjectiv core found.
 091 glGetQueryObjectuiv core found.
 092 glBindBuffer core found.
 093 glDeleteBuffers core found.
 094 glGenBuffers core found.
 095 glIsBuffer core found.
 096 glBufferData core found.
 097 glBufferSubData core found.
 098 glGetBufferSubData core found.
 099 glMapBuffer core found.
 100 glUnmapBuffer core found.
 101 glGetBufferParameteriv core found.
 102 glGetBufferPointerv core found.
 103 glBlendEquationSeparate core found.
 104 glDrawBuffers core found.
 105 glStencilOpSeparate core found.
 106 glStencilFuncSeparate core found.
 107 glStencilMaskSeparate core found.
 108 glAttachShader core found.
 109 glBindAttribLocation core found.
 110 glCompileShader core found.
 111 glCreateProgram core found.
 112 glCreateShader core found.
 113 glDeleteProgram core found.
 114 glDeleteShader core found.
 115 glDetachShader core found.
 116 glDisableVertexAttribArray core found.
 117 glEnableVertexAttribArray core found.
 118 glGetActiveAttrib core found.
 119 glGetActiveUniform core found.
 120 glGetAttachedShaders core found.
 121 glGetAttribLocation core found.
 122 glGetProgramiv core found.
 123 glGetProgramInfoLog core found.
 124 glGetShaderiv core found.
 125 glGetShaderInfoLog core found.
 126 glGetShaderSource core found.
 127 glGetUniformLocation core found.
 128 glGetUniformfv core found.
 129 glGetUniformiv core found.
 130 glGetVertexAttribdv core found.
 131 glGetVertexAttribfv core found.
 132 glGetVertexAttribiv core found.
 133 glGetVertexAttribPointerv core found.
 134 glIsProgram core found.
 135 glIsShader core found.
 136 glLinkProgram core found.
 137 glShaderSource core found.
 138 glUseProgram core found.
 139 glUniform1f core found.
 140 glUniform2f core found.
 141 glUniform3f core found.
 142 glUniform4f core found.
 143 glUniform1i core found.
 144 glUniform2i core found.
 145 glUniform3i core found.
 146 glUniform4i core found.
 147 glUniform1fv core found.
 148 glUniform2fv core found.
 149 glUniform3fv core found.
 150 glUniform4fv core found.
 151 glUniform1iv core found.
 152 glUniform2iv core found.
 153 glUniform3iv core found.
 154 glUniform4iv core found.
 155 glUniformMatrix2fv core found.
 156 glUniformMatrix3fv core found.
 157 glUniformMatrix4fv core found.
 158 glValidateProgram core found.
 159 glVertexAttrib1d core found.
 160 glVertexAttrib1dv core found.
 161 glVertexAttrib1f core found.
 162 glVertexAttrib1fv core found.
 163 glVertexAttrib1s core found.
 164 glVertexAttrib1sv core found.
 165 glVertexAttrib2d core found.
 166 glVertexAttrib2dv core found.
 167 glVertexAttrib2f core found.
 168 glVertexAttrib2fv core found.
 169 glVertexAttrib2s core found.
 170 glVertexAttrib2sv core found.
 171 glVertexAttrib3d core found.
 172 glVertexAttrib3dv core found.
 173 glVertexAttrib3f core found.
 174 glVertexAttrib3fv core found.
 175 glVertexAttrib3s core found.
 176 glVertexAttrib3sv core found.
 177 glVertexAttrib4Nbv core found.
 178 glVertexAttrib4Niv core found.
 179 glVertexAttrib4Nsv core found.
 180 glVertexAttrib4Nub core found.
 181 glVertexAttrib4Nubv core found.
 182 glVertexAttrib4Nuiv core found.
 183 glVertexAttrib4Nusv core found.
 184 glVertexAttrib4bv core found.
 185 glVertexAttrib4d core found.
 186 glVertexAttrib4dv core found.
 187 glVertexAttrib4f core found.
 188 glVertexAttrib4fv core found.
 189 glVertexAttrib4iv core found.
 190 glVertexAttrib4s core found.
 191 glVertexAttrib4sv core found.
 192 glVertexAttrib4ubv core found.
 193 glVertexAttrib4uiv core found.
 194 glVertexAttrib4usv core found.
 195 glVertexAttribPointer core found.
 196 glUniformMatrix2x3fv core found.
 197 glUniformMatrix3x2fv core found.
 198 glUniformMatrix2x4fv core found.
 199 glUniformMatrix4x2fv core found.
 200 glUniformMatrix3x4fv core found.
 201 glUniformMatrix4x3fv core found.
 202 glColorMaski core found.
 203 glGetBooleani_v core found.
 204 glGetIntegeri_v core found.
 205 glEnablei core found.
 206 glDisablei core found.
 207 glIsEnabledi core found.
 208 glBeginTransformFeedback core found.
 209 glEndTransformFeedback core found.
 210 glBindBufferRange core found.
 211 glBindBufferBase core found.
 212 glTransformFeedbackVaryings core found.
 213 glGetTransformFeedbackVarying core found.
 214 glClampColor core found.
 215 glBeginConditionalRender core found.
 216 glEndConditionalRender core found.
 217 glVertexAttribIPointer core found.
 218 glGetVertexAttribIiv core found.
 219 glGetVertexAttribIuiv core found.
 220 glVertexAttribI1i core found.
 221 glVertexAttribI2i core found.
 222 glVertexAttribI3i core found.
 223 glVertexAttribI4i core found.
 224 glVertexAttribI1ui core found.
 225 glVertexAttribI2ui core found.
 226 glVertexAttribI3ui core found.
 227 glVertexAttribI4ui core found.
 228 glVertexAttribI1iv core found.
 229 glVertexAttribI2iv core found.
 230 glVertexAttribI3iv core found.
 231 glVertexAttribI4iv core found.
 232 glVertexAttribI1uiv core found.
 233 glVertexAttribI2uiv core found.
 234 glVertexAttribI3uiv core found.
 235 glVertexAttribI4uiv core found.
 236 glVertexAttribI4bv core found.
 237 glVertexAttribI4sv core found.
 238 glVertexAttribI4ubv core found.
 239 glVertexAttribI4usv core found.
 240 glGetUniformuiv core found.
 241 glBindFragDataLocation core found.
 242 glGetFragDataLocation core found.
 243 glUniform1ui core found.
 244 glUniform2ui core found.
 245 glUniform3ui core found.
 246 glUniform4ui core found.
 247 glUniform1uiv core found.
 248 glUniform2uiv core found.
 249 glUniform3uiv core found.
 250 glUniform4uiv core found.
 251 glTexParameterIiv core found.
 252 glTexParameterIuiv core found.
 253 glGetTexParameterIiv core found.
 254 glGetTexParameterIuiv core found.
 255 glClearBufferiv core found.
 256 glClearBufferuiv core found.
 257 glClearBufferfv core found.
 258 glClearBufferfi core found.
 259 glGetStringi core found.
 260 glIsRenderbuffer core found.
 261 glBindRenderbuffer core found.
 262 glDeleteRenderbuffers core found.
 263 glGenRenderbuffers core found.
 264 glRenderbufferStorage core found.
 265 glGetRenderbufferParameteriv core found.
 266 glIsFramebuffer core found.
 267 glBindFramebuffer core found.
 268 glDeleteFramebuffers core found.
 269 glGenFramebuffers core found.
 270 glCheckFramebufferStatus core found.
 271 glFramebufferTexture1D core found.
 272 glFramebufferTexture2D core found.
 273 glFramebufferTexture3D core found.
 274 glFramebufferRenderbuffer core found.
 275 glGetFramebufferAttachmentParameteriv core found.
 276 glGenerateMipmap core found.
 277 glBlitFramebuffer core found.
 278 glRenderbufferStorageMultisample core found.
 279 glFramebufferTextureLayer core found.
 280 glMapBufferRange core found.
 281 glFlushMappedBufferRange core found.
 282 glBindVertexArray core found.
 283 glDeleteVertexArrays core found.
 284 glGenVertexArrays core found.
 285 glIsVertexArray core found.
 286 glDrawArraysInstanced core found.
 287 glDrawElementsInstanced core found.
 288 glTexBuffer core found.
 289 glPrimitiveRestartIndex core found.
 290 glCopyBufferSubData core found.
 291 glGetUniformIndices core found.
 292 glGetActiveUniformsiv core found.
 293 glGetActiveUniformName core found.
 294 glGetUniformBlockIndex core found.
 295 glGetActiveUniformBlockiv core found.
 296 glGetActiveUniformBlockName core found.
 297 glUniformBlockBinding core found.
 298 glDrawElementsBaseVertex core found.
 299 glDrawRangeElementsBaseVertex core found.
 300 glDrawElementsInstancedBaseVertex core found.
 301 glMultiDrawElementsBaseVertex core found.
 302 glProvokingVertex core found.
 303 glFenceSync core found.
 304 glIsSync core found.
 305 glDeleteSync core found.
 306 glClientWaitSync core found.
 307 glWaitSync core found.
 308 glGetInteger64v core found.
 309 glGetSynciv core found.
 310 glGetInteger64i_v core found.
 311 glGetBufferParameteri64v core found.
 312 glFramebufferTexture core found.
 313 glTexImage2DMultisample core found.
 314 glTexImage3DMultisample core found.
 315 glGetMultisamplefv core found.
 316 glSampleMaski core found.
 317 glBindFragDataLocationIndexed core found.
 318 glGetFragDataIndex core found.
 319 glGenSamplers core found.
 320 glDeleteSamplers core found.
 321 glIsSampler core found.
 322 glBindSampler core found.
 323 glSamplerParameteri core found.
 324 glSamplerParameteriv core found.
 325 glSamplerParameterf core found.
 326 glSamplerParameterfv core found.
 327 glSamplerParameterIiv core found.
 328 glSamplerParameterIuiv core found.
 329 glGetSamplerParameteriv core found.
 330 glGetSamplerParameterIiv core found.
 331 glGetSamplerParameterfv core found.
 332 glGetSamplerParameterIuiv core found.
 333 glQueryCounter core found.
 334 glGetQueryObjecti64v core found.
 335 glGetQueryObjectui64v core found.
 336 glVertexAttribDivisor core found.
 337 glVertexAttribP1ui core found.
 338 glVertexAttribP1uiv core found.
 339 glVertexAttribP2ui core found.
 340 glVertexAttribP2uiv core found.
 341 glVertexAttribP3ui core found.
 342 glVertexAttribP3uiv core found.
 343 glVertexAttribP4ui core found.
 344 glVertexAttribP4uiv core found.
 345 glMinSampleShading core found.
 346 glBlendEquationi core found.
 347 glBlendEquationSeparatei core found.
 348 glBlendFunci core found.
 349 glBlendFuncSeparatei core found.
 350 glDrawArraysIndirect core found.
 351 glDrawElementsIndirect core found.
 352 glUniform1d core found.
 353 glUniform2d core found.
 354 glUniform3d core found.
 355 glUniform4d core found.
 356 glUniform1dv core found.
 357 glUniform2dv core found.
 358 glUniform3dv core found.
 359 glUniform4dv core found.
 360 glUniformMatrix2dv core found.
 361 glUniformMatrix3dv core found.
 362 glUniformMatrix4dv core found.
 363 glUniformMatrix2x3dv core found.
 364 glUniformMatrix2x4dv core found.
 365 glUniformMatrix3x2dv core found.
 366 glUniformMatrix3x4dv core found.
 367 glUniformMatrix4x2dv core found.
 368 glUniformMatrix4x3dv core found.
 369 glGetUniformdv core found.
 370 glGetSubroutineUniformLocation core found.
 371 glGetSubroutineIndex core found.
 372 glGetActiveSubroutineUniformiv core found.
 373 glGetActiveSubroutineUniformName core found.
 374 glGetActiveSubroutineName core found.
 375 glUniformSubroutinesuiv core found.
 376 glGetUniformSubroutineuiv core found.
 377 glGetProgramStageiv core found.
 378 glPatchParameteri core found.
 379 glPatchParameterfv core found.
 380 glBindTransformFeedback core found.
 381 glDeleteTransformFeedbacks core found.
 382 glGenTransformFeedbacks core found.
 383 glIsTransformFeedback core found.
 384 glPauseTransformFeedback core found.
 385 glResumeTransformFeedback core found.
 386 glDrawTransformFeedback core found.
 387 glDrawTransformFeedbackStream core found.
 388 glBeginQueryIndexed core found.
 389 glEndQueryIndexed core found.
 390 glGetQueryIndexediv core found.
 391 glReleaseShaderCompiler core found.
 392 glShaderBinary core found.
 393 glGetShaderPrecisionFormat core found.
 394 glDepthRangef core found.
 395 glClearDepthf core found.
 396 glGetProgramBinary core found.
 397 glProgramBinary core found.
 398 glProgramParameteri core found.
 399 glUseProgramStages core found.
 400 glActiveShaderProgram core found.
 401 glCreateShaderProgramv core found.
 402 glBindProgramPipeline core found.
 403 glDeleteProgramPipelines core found.
 404 glGenProgramPipelines core found.
 405 glIsProgramPipeline core found.
 406 glGetProgramPipelineiv core found.
 407 glProgramUniform1i core found.
 408 glProgramUniform1iv core found.
 409 glProgramUniform1f core found.
 410 glProgramUniform1fv core found.
 411 glProgramUniform1d core found.
 412 glProgramUniform1dv core found.
 413 glProgramUniform1ui core found.
 414 glProgramUniform1uiv core found.
 415 glProgramUniform2i core found.
 416 glProgramUniform2iv core found.
 417 glProgramUniform2f core found.
 418 glProgramUniform2fv core found.
 419 glProgramUniform2d core found.
 420 glProgramUniform2dv core found.
 421 glProgramUniform2ui core found.
 422 glProgramUniform2uiv core found.
 423 glProgramUniform3i core found.
 424 glProgramUniform3iv core found.
 425 glProgramUniform3f core found.
 426 glProgramUniform3fv core found.
 427 glProgramUniform3d core found.
 428 glProgramUniform3dv core found.
 429 glProgramUniform3ui core found.
 430 glProgramUniform3uiv core found.
 431 glProgramUniform4i core found.
 432 glProgramUniform4iv core found.
 433 glProgramUniform4f core found.
 434 glProgramUniform4fv core found.
 435 glProgramUniform4d core found.
 436 glProgramUniform4dv core found.
 437 glProgramUniform4ui core found.
 438 glProgramUniform4uiv core found.
 439 glProgramUniformMatrix2fv core found.
 440 glProgramUniformMatrix3fv core found.
 441 glProgramUniformMatrix4fv core found.
 442 glProgramUniformMatrix2dv core found.
 443 glProgramUniformMatrix3dv core found.
 444 glProgramUniformMatrix4dv core found.
 445 glProgramUniformMatrix2x3fv core found.
 446 glProgramUniformMatrix3x2fv core found.
 447 glProgramUniformMatrix2x4fv core found.
 448 glProgramUniformMatrix4x2fv core found.
 449 glProgramUniformMatrix3x4fv core found.
 450 glProgramUniformMatrix4x3fv core found.
 451 glProgramUniformMatrix2x3dv core found.
 452 glProgramUniformMatrix3x2dv core found.
 453 glProgramUniformMatrix2x4dv core found.
 454 glProgramUniformMatrix4x2dv core found.
 455 glProgramUniformMatrix3x4dv core found.
 456 glProgramUniformMatrix4x3dv core found.
 457 glValidateProgramPipeline core found.
 458 glGetProgramPipelineInfoLog core found.
 459 glVertexAttribL1d core found.
 460 glVertexAttribL2d core found.
 461 glVertexAttribL3d core found.
 462 glVertexAttribL4d core found.
 463 glVertexAttribL1dv core found.
 464 glVertexAttribL2dv core found.
 465 glVertexAttribL3dv core found.
 466 glVertexAttribL4dv core found.
 467 glVertexAttribLPointer core found.
 468 glGetVertexAttribLdv core found.
 469 glViewportArrayv core found.
 470 glViewportIndexedf core found.
 471 glViewportIndexedfv core found.
 472 glScissorArrayv core found.
 473 glScissorIndexed core found.
 474 glScissorIndexedv core found.
 475 glDepthRangeArrayv core found.
 476 glDepthRangeIndexed core found.
 477 glGetFloati_v core found.
 478 glGetDoublei_v core found.
 479 glDrawArraysInstancedBaseInstance core found.
 480 glDrawElementsInstancedBaseInstance core found.
 481 glDrawElementsInstancedBaseVertexBaseInstance core found.
 482 glGetInternalformativ core found.
 483 glGetActiveAtomicCounterBufferiv core found.
 484 glBindImageTexture core found.
 485 glMemoryBarrier core found.
 486 glTexStorage1D core found.
 487 glTexStorage2D core found.
 488 glTexStorage3D core found.
 489 glDrawTransformFeedbackInstanced core found.
 490 glDrawTransformFeedbackStreamInstanced core found.
 493 glDispatchCompute core found.
 494 glDispatchComputeIndirect core found.
 496 glFramebufferParameteri core found.
 497 glGetFramebufferParameteriv core found.
 498 glGetInternalformati64v core found.
 503 glInvalidateFramebuffer core found.
 504 glInvalidateSubFramebuffer core found.
 505 glMultiDrawArraysIndirect core found.
 506 glMultiDrawElementsIndirect core found.
 507 glGetProgramInterfaceiv core found.
 508 glGetProgramResourceIndex core found.
 509 glGetProgramResourceName core found.
 510 glGetProgramResourceiv core found.
 511 glGetProgramResourceLocation core found.
 512 glGetProgramResourceLocationIndex core found.
 513 glShaderStorageBlockBinding core found.
 514 glTexBufferRange core found.
 515 glTexStorage2DMultisample core found.
 516 glTexStorage3DMultisample core found.
 518 glBindVertexBuffer core found.
 519 glVertexAttribFormat core found.
 520 glVertexAttribIFormat core found.
 521 glVertexAttribLFormat core found.
 522 glVertexAttribBinding core found.
 523 glVertexBindingDivisor core found.
 524 glDebugMessageControl core found.
 525 glDebugMessageInsert core found.
 526 glDebugMessageCallback core found.
 527 glGetDebugMessageLog core found.
 528 glPushDebugGroup core found.
 529 glPopDebugGroup core found.
 530 glObjectLabel core found.
 531 glGetObjectLabel core found.
 532 glObjectPtrLabel core found.
 533 glGetObjectPtrLabel core found.
 534 glBufferStorage core found.
 [!] sglDdrv_w32.c:808?SglLoadOpenGlVmt
  543 glClipControlEXT ext found.
 [!] sglDdrv_w32.c:808?SglLoadOpenGlVmt
  551 glNamedBufferStorageEXT ext found.
 [!] sglDdrv_w32.c:808?SglLoadOpenGlVmt
  589 glTextureBufferRangeEXT ext found.
 [!] sglDdrv_w32.c:808?SglLoadOpenGlVmt
  606 glTextureParameteriEXT ext found.
 641 glMemoryBarrierByRegion core found.
 [!] sglDdrv_w32.c:808?SglLoadOpenGlVmt
  644 glGetGraphicsResetStatusARB ext found.
 [!] sglDdrv_w32.c:808?SglLoadOpenGlVmt
  645 glGetnCompressedTexImageARB ext found.
 [!] sglDdrv_w32.c:808?SglLoadOpenGlVmt
  646 glGetnTexImageARB ext found.
 [!] sglDdrv_w32.c:808?SglLoadOpenGlVmt
  647 glGetnUniformdvARB ext found.
 [!] sglDdrv_w32.c:808?SglLoadOpenGlVmt
  648 glGetnUniformfvARB ext found.
 [!] sglDdrv_w32.c:808?SglLoadOpenGlVmt
  649 glGetnUniformivARB ext found.
 [!] sglDdrv_w32.c:808?SglLoadOpenGlVmt
  650 glGetnUniformuivARB ext found.
 [!] sglDdrv_w32.c:808?SglLoadOpenGlVmt
  651 glReadnPixelsARB ext found.
 Listing #187 "core" GL supported extensions.
 000 GL_EXT_blend_minmax ext found.
 001 GL_EXT_blend_subtract ext found.
 002 GL_EXT_blend_color ext found.
 003 GL_EXT_abgr ext found.
 004 GL_EXT_texture3D ext found.
 005 GL_EXT_clip_volume_hint ext found.
 006 GL_EXT_compiled_vertex_array ext found.
 007 GL_SGIS_texture_edge_clamp ext found.
 008 GL_SGIS_generate_mipmap ext found.
 009 GL_EXT_draw_range_elements ext found.
 010 GL_SGIS_texture_lod ext found.
 011 GL_EXT_rescale_normal ext found.
 012 GL_EXT_packed_pixels ext found.
 013 GL_EXT_texture_edge_clamp ext found.
 014 GL_EXT_separate_specular_color ext found.
 015 GL_ARB_multitexture ext found.
 016 GL_ARB_map_buffer_alignment ext found.
 017 GL_ARB_conservative_depth ext found.
 018 GL_EXT_texture_env_combine ext found.
 019 GL_EXT_bgra ext found.
 020 GL_EXT_blend_func_separate ext found.
 021 GL_EXT_secondary_color ext found.
 022 GL_EXT_fog_coord ext found.
 023 GL_EXT_texture_env_add ext found.
 024 GL_ARB_texture_cube_map ext found.
 025 GL_ARB_transpose_matrix ext found.
 026 GL_ARB_internalformat_query ext found.
 027 GL_ARB_internalformat_query2 ext found.
 028 GL_ARB_texture_env_add ext found.
 029 GL_IBM_texture_mirrored_repeat ext found.
 030 GL_EXT_multi_draw_arrays ext found.
 031 GL_SUN_multi_draw_arrays ext found.
 032 GL_NV_blend_square ext found.
 033 GL_ARB_texture_compression ext found.
 034 GL_3DFX_texture_compression_FXT1 ext found.
 035 GL_EXT_texture_filter_anisotropic ext found.
 036 GL_ARB_texture_border_clamp ext found.
 037 GL_ARB_point_parameters ext found.
 038 GL_ARB_texture_env_combine ext found.
 039 GL_ARB_texture_env_dot3 ext found.
 040 GL_ARB_texture_env_crossbar ext found.
 041 GL_EXT_texture_compression_s3tc ext found.
 042 GL_ARB_shadow ext found.
 043 GL_ARB_window_pos ext found.
 044 GL_EXT_shadow_funcs ext found.
 045 GL_EXT_stencil_wrap ext found.
 046 GL_ARB_vertex_program ext found.
 047 GL_EXT_texture_rectangle ext found.
 048 GL_ARB_fragment_program ext found.
 049 GL_EXT_stencil_two_side ext found.
 050 GL_ATI_separate_stencil ext found.
 051 GL_ARB_vertex_buffer_object ext found.
 052 GL_EXT_texture_lod_bias ext found.
 053 GL_ARB_occlusion_query ext found.
 054 GL_ARB_fragment_shader ext found.
 055 GL_ARB_shader_objects ext found.
 056 GL_ARB_shading_language_100 ext found.
 057 GL_ARB_texture_non_power_of_two ext found.
 058 GL_ARB_vertex_shader ext found.
 059 GL_NV_texgen_reflection ext found.
 060 GL_ARB_point_sprite ext found.
 061 GL_ARB_fragment_program_shadow ext found.
 062 GL_EXT_blend_equation_separate ext found.
 063 GL_ARB_depth_texture ext found.
 064 GL_ARB_texture_rectangle ext found.
 065 GL_ARB_draw_buffers ext found.
 066 GL_ARB_color_buffer_float ext found.
 067 GL_ARB_half_float_pixel ext found.
 068 GL_ARB_texture_float ext found.
 069 GL_ARB_pixel_buffer_object ext found.
 070 GL_EXT_framebuffer_object ext found.
 071 GL_ARB_draw_instanced ext found.
 072 GL_ARB_half_float_vertex ext found.
 073 GL_ARB_occlusion_query2 ext found.
 074 GL_EXT_draw_buffers2 ext found.
 075 GL_WIN_swap_hint ext found.
 076 GL_EXT_texture_sRGB ext found.
 077 GL_ARB_multisample ext found.
 078 GL_EXT_packed_float ext found.
 079 GL_EXT_texture_shared_exponent ext found.
 080 GL_ARB_texture_rg ext found.
 081 GL_ARB_texture_compression_rgtc ext found.
 082 GL_NV_conditional_render ext found.
 083 GL_ARB_texture_swizzle ext found.
 084 GL_EXT_texture_swizzle ext found.
 085 GL_ARB_texture_gather ext found.
 086 GL_ARB_sync ext found.
 087 GL_ARB_framebuffer_sRGB ext found.
 088 GL_EXT_packed_depth_stencil ext found.
 089 GL_ARB_depth_buffer_float ext found.
 090 GL_EXT_transform_feedback ext found.
 091 GL_ARB_transform_feedback2 ext found.
 092 GL_ARB_draw_indirect ext found.
 093 GL_EXT_framebuffer_blit ext found.
 094 GL_EXT_framebuffer_multisample ext found.
 095 GL_ARB_framebuffer_object ext found.
 096 GL_ARB_framebuffer_no_attachments ext found.
 097 GL_EXT_texture_array ext found.
 098 GL_EXT_texture_integer ext found.
 099 GL_ARB_map_buffer_range ext found.
 100 GL_ARB_texture_buffer_range ext found.
 101 GL_EXT_texture_buffer ext found.
 102 GL_EXT_texture_snorm ext found.
 103 GL_ARB_blend_func_extended ext found.
 104 GL_INTEL_performance_queries ext found.
 105 GL_INTEL_performance_query ext found.
 106 GL_ARB_copy_buffer ext found.
 107 GL_ARB_sampler_objects ext found.
 108 GL_NV_primitive_restart ext found.
 109 GL_ARB_seamless_cube_map ext found.
 110 GL_ARB_uniform_buffer_object ext found.
 111 GL_ARB_depth_clamp ext found.
 112 GL_ARB_vertex_array_bgra ext found.
 113 GL_ARB_shader_bit_encoding ext found.
 114 GL_ARB_draw_buffers_blend ext found.
 115 GL_ARB_geometry_shader4 ext found.
 116 GL_EXT_geometry_shader4 ext found.
 117 GL_ARB_texture_query_lod ext found.
 118 GL_ARB_explicit_attrib_location ext found.
 119 GL_ARB_draw_elements_base_vertex ext found.
 120 GL_ARB_instanced_arrays ext found.
 121 GL_ARB_base_instance ext found.
 122 GL_ARB_fragment_coord_conventions ext found.
 123 GL_EXT_gpu_program_parameters ext found.
 124 GL_ARB_texture_buffer_object_rgb32 ext found.
 125 GL_ARB_texture_rgb10_a2ui ext found.
 126 GL_ARB_texture_multisample ext found.
 127 GL_ARB_vertex_type_2_10_10_10_rev ext found.
 128 GL_ARB_timer_query ext found.
 129 GL_ARB_tessellation_shader ext found.
 130 GL_ARB_vertex_array_object ext found.
 131 GL_ARB_provoking_vertex ext found.
 132 GL_ARB_sample_shading ext found.
 133 GL_ARB_texture_cube_map_array ext found.
 134 GL_EXT_gpu_shader4 ext found.
 135 GL_ARB_gpu_shader5 ext found.
 136 GL_ARB_gpu_shader_fp64 ext found.
 137 GL_ARB_shader_subroutine ext found.
 138 GL_ARB_transform_feedback3 ext found.
 139 GL_ARB_get_program_binary ext found.
 140 GL_ARB_separate_shader_objects ext found.
 141 GL_ARB_shader_precision ext found.
 142 GL_ARB_vertex_attrib_64bit ext found.
 143 GL_ARB_viewport_array ext found.
 144 GL_ARB_transform_feedback_instanced ext found.
 145 GL_ARB_compressed_texture_pixel_storage ext found.
 146 GL_ARB_shader_atomic_counters ext found.
 147 GL_ARB_shading_language_packing ext found.
 148 GL_ARB_shading_language_420pack ext found.
 149 GL_ARB_texture_storage ext found.
 150 GL_EXT_texture_storage ext found.
 151 GL_ARB_vertex_attrib_binding ext found.
 152 GL_ARB_multi_draw_indirect ext found.
 153 GL_ARB_program_interface_query ext found.
 154 GL_ARB_texture_storage_multisample ext found.
 155 GL_ARB_buffer_storage ext found.
 156 GL_ARB_debug_output ext found.
 157 GL_KHR_debug ext found.
 158 GL_ARB_arrays_of_arrays ext found.
 159 GL_INTEL_map_texture ext found.
 160 GL_ARB_texture_compression_bptc ext found.
 161 GL_ARB_ES2_compatibility ext found.
 162 GL_ARB_ES3_compatibility ext found.
 163 GL_ARB_robustness ext found.
 164 GL_EXT_texture_sRGB_decode ext found.
 165 GL_KHR_blend_equation_advanced ext found.
 166 GL_EXT_shader_integer_mix ext found.
 167 GL_ARB_stencil_texturing ext found.
 168 WGL_EXT_depth_float ext found.
 169 WGL_ARB_buffer_region ext found.
 170 WGL_ARB_extensions_string ext found.
 171 WGL_ARB_make_current_read ext found.
 172 WGL_ARB_pixel_format ext found.
 173 WGL_ARB_pbuffer ext found.
 174 WGL_EXT_extensions_string ext found.
 175 WGL_EXT_swap_control ext found.
 176 WGL_EXT_swap_control_tear ext found.
 177 WGL_ARB_multisample ext found.
 178 WGL_ARB_pixel_format_float ext found.
 179 WGL_ARB_framebuffer_sRGB ext found.
 180 WGL_ARB_create_context ext found.
 181 WGL_ARB_create_context_profile ext found.
 182 WGL_EXT_pixel_format_packed_float ext found.
 183 WGL_EXT_create_context_es_profile ext found.
 184 WGL_EXT_create_context_es2_profile ext found.
 185 WGL_NV_DX_interop ext found.
 186 WGL_ARB_create_context_robustness ext found.
 [!] sglDdrv_w32.c:2091?_SglBuildDpu
  677 381 1920 1080 96 96 32 1 36 36 51 60 1 
 Opening the SIGMA GL/2 Drawing Execution Port 000
	Intel(R) HD Graphics 4.0.0 - Build 10.18.10.4425
 [$] sglDdrv_w32.c:2117?_SglBuildDpu
  WGL_EXT_depth_float WGL_ARB_buffer_region WGL_ARB_extensions_string WGL_ARB_make_current_read WGL_ARB_pixel_format WGL_ARB_pbuffer WGL_EXT_extensions_string WGL_EXT_swap_control WGL_EXT_swap_control_tear WGL_ARB_multisample WGL_ARB_pixel_format_float WGL_ARB_framebuffer_sRGB WGL_ARB_create_context WGL_ARB_create_context_profile WGL_EXT_pixel_format_packed_float WGL_EXT_create_context_es_profile WGL_EXT_create_context_es2_profile WGL_NV_DX_interop WGL_ARB_create_context_robustness 
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  API ERROR HIGH 1280 GL error GL_INVALID_ENUM
 ERR sglDdrv_w32.c:2248?_SglBuildDpu
  GL: INVAL_PARAM
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  API ERROR HIGH 1280 GL error GL_INVALID_ENUM
 ERR sglDdrv_w32.c:2274?_SglBuildDpu
  GL: INVAL_PARAM
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  API ERROR HIGH 1280 GL error GL_INVALID_ENUM
 ERR sglDdrv_w32.c:2284?_SglBuildDpu
  GL: INVAL_PARAM
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  API ERROR HIGH 1280 GL error GL_INVALID_ENUM
 ERR sglDdrv_w32.c:2286?_SglBuildDpu
  GL: INVAL_PARAM
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  API ERROR HIGH 1280 GL error GL_INVALID_ENUM
 ERR sglDdrv_w32.c:2290?_SglBuildDpu
  GL: INVAL_PARAM
Draw device '
           :::::::::::     :::     :::::::::   ::::::::      :::               
               :+:       :+: :+:   :+:    :+: :+:    :+:   :+: :+:             
               +:+      +:+   +:+  +:+    +:+ +:+         +:+   +:+            
               +#+     +#++:++#++: +#++:++#:  :#:        +#++:++#++:           
               +#+     +#+     +#+ +#+    +#+ +#+   +#+# +#+     +#+           
               #+#     #+#     #+# #+#    #+# #+#    #+# #+#     #+#           
               ###     ###     ### ###    ###  ########  ###     ###           
                                                                               
              Q W A D R O   E X E C U T I O N   E C O S Y S T E M              
                                                                               
                               Public Test Build                               
              (c) 2017 SIGMA Technology Group --- Federacao SIGMA              
                                www.sigmaco.org                                
                                                                               ' <'targa'> registered on draw system
 afxDrawThread.c:171
  AfxAcquireDrawThreads(cnt=1,config=0022d39c,dthr=0022d4f8)
 afxClass<Draw Thread, Thread>ConstructingObject(06e55170)
 afxClass<Thread>::ConstructObject(06e55170)
 afxThread.c:263
  _AfxThrCtor(06e55170)
 afxClass<Draw Thread>::ConstructObject(06e55170)
 afxDrawThread.c:128
  _AfxDthrCtor(dthr=06e55170)
 afxThread.c:204
  AfxRunThread(thr=06e55170)
 /qwadro/afx//system32wd//*.icd
 Loading draw ICD e2newton.icd
 afxClass<Installable Client Driver, Executable & Linkable File>ConstructingObject(005737f0)
 afxClass<Executable & Linkable File>::ConstructObject(005737f0)
 afxExecutable.c:153
  _AfxExeCtor(uri:e2newton.icd)
 afxClass<Installable Client Driver>::ConstructObject(005737f0)
 ERR afxIcd.c:35?_AfxIcdCtor
  
 ERR afxClass.c:487?_AfxClsRunSubsetCtor
  
 Destructing instance 005737f0 of Installable Client Driver class.
 Destructing instance 005737f0 of Installable Client Driver : Executable & Linkable File class.
 Destructing instance 005737f0 of Executable & Linkable File class.
 afxExecutable.c:211
  _AfxExeDtor(exe=005737f0)
 ERR afxClass.c:784?AfxAcquireObjects
  
 ERR afxIcd.c:92?_AfxSysLoadIcd
  
 Loading draw ICD e2sound.icd
 afxClass<Installable Client Driver, Executable & Linkable File>ConstructingObject(005737f0)
 afxClass<Executable & Linkable File>::ConstructObject(005737f0)
 afxExecutable.c:153
  _AfxExeCtor(uri:e2sound.icd)
 afxClass<Installable Client Driver>::ConstructObject(005737f0)
 ERR afxUri.c:619?AfxExcerptUriFile
  
 ERR afxUri.c:619?AfxExcerptUriFile
  (uri)
    Invalid
 ERR afxBufferedString.c:414?AfxExcerptBufferedString
  
 ERR afxBufferedString.c:414?AfxExcerptBufferedString
  (str)
    Invalid
 ERR afxString.c:45?AfxGetStringLength
  
 ERR afxString.c:45?AfxGetStringLength
  (str)
    Invalid
 ERR afxString.c:32?AfxGetStringData
  
 ERR afxString.c:32?AfxGetStringData
  (str)
    Invalid
 ERR afxUri.c:453?AfxGetUriString
  
 ERR afxUri.c:453?AfxGetUriString
  (uri)
    Invalid
 ERR afxUri.c:453?AfxGetUriString
  
 ERR afxUri.c:453?AfxGetUriString
  (uri)
    Invalid
 ERR afxString.c:32?AfxGetStringData
  
 ERR afxString.c:32?AfxGetStringData
  (str)
    Invalid
 ERR afxUri.c:453?AfxGetUriString
  
 ERR afxUri.c:453?AfxGetUriString
  (uri)
    Invalid
 ERR afxUri.c:453?AfxGetUriString
  
 ERR afxUri.c:453?AfxGetUriString
  (uri)
    Invalid
 ERR afxString.c:45?AfxGetStringLength
  
 ERR afxString.c:45?AfxGetStringLength
  (str)
    Invalid
Installing 'U‰åSVƒìl‹E‹M‹”ò1ê‰UôÇEÀ' ICD on sound system...
	A4D --- Qwadro Execution Ecosystem 0.7.2
	Vendor: SIGMA Technology Group <www.sigmaco.org>
	Note: 
       ::::::::    :::::::::::    ::::::::    ::::     ::::       :::          
      :+:    :+:       :+:       :+:    :+:   +:+:+: :+:+:+     :+: :+:        
      +:+              +:+       +:+          +:+ +:+:+ +:+    +:+   +:+       
      +#++:++#++       +#+       :#:          +#+  +:+  +#+   +#++:++#++:      
             +#+       +#+       +#+   +#+#   +#+       +#+   +#+     +#+      
      #+#    #+#       #+#       #+#    #+#   #+#       #+#   #+#     #+#      
       ########    ###########    ########    ###       ###   ###     ###      
                                                                               
              Q W A D R O   E X E C U T I O N   E C O S Y S T E M              
                                                                               
                               Public Test Build                               
              (c) 2017 SIGMA Technology Group --- Federacao SIGMA              
                                www.sigmaco.org                                
                                                                               
 Installing Sound Device at 005738f4 by 005738e0 over 004e636c...
 afxClass<Sound Device, Sound Device>ConstructingObject(06e35d40)
 afxClass<Sound Device, Device>ConstructingObject(06e35d40)
 afxClass<Device>::ConstructObject(06e35d40)
 afxClass<Sound Device>::ConstructObject(06e35d40)
 afxClass<Sound Device>::ConstructObject(06e35d40)
 salSdev.c:419
  _SalSdevCtor(sdev=06e35d40)
 Installing Sound Context at 06e35e2c by 06e35e18 over 004e6430...
 0  - Generic Software
 Listing devices available with ALC_ENUMERATE_ALL_EXT
 0  - Generic Software on Alto-falantes (2- USB Audio Device)
 1  - Generic Software on Alto-falantes (VIA HD Audio(Compatible))
 2  - Generic Software on Headphone (VIA HD Audio(Compatible))
 Listing available capture devices:
 0  - Mixagem estéreo (VIA HD Audio(C
 1  - Microfone (VIA HD Audio(Compati
 2  - Microfone (2- USB Audio Device)
 000 alEnable core found.
 001 alDisable core found.
 002 alIsEnabled core found.
 003 alGetString core found.
 004 alGetBooleanv core found.
 005 alGetIntegerv core found.
 006 alGetFloatv core found.
 007 alGetDoublev core found.
 008 alGetBoolean core found.
 009 alGetInteger core found.
 010 alGetFloat core found.
 011 alGetDouble core found.
 012 alGetError core found.
 013 alIsExtensionPresent core found.
 014 alGetProcAddress core found.
 015 alGetEnumValue core found.
 016 alListenerf core found.
 017 alListener3f core found.
 018 alListenerfv core found.
 019 alListeneri core found.
 020 alListener3i core found.
 021 alListeneriv core found.
 022 alGetListenerf core found.
 023 alGetListener3f core found.
 024 alGetListenerfv core found.
 025 alGetListeneri core found.
 026 alGetListener3i core found.
 027 alGetListeneriv core found.
 028 alGenSources core found.
 029 alDeleteSources core found.
 030 alIsSource core found.
 031 alSourcef core found.
 032 alSource3f core found.
 033 alSourcefv core found.
 034 alSourcei core found.
 035 alSource3i core found.
 036 alSourceiv core found.
 037 alGetSourcef core found.
 038 alGetSource3f core found.
 039 alGetSourcefv core found.
 040 alGetSourcei core found.
 041 alGetSource3i core found.
 042 alGetSourceiv core found.
 043 alSourcePlayv core found.
 044 alSourceStopv core found.
 045 alSourceRewindv core found.
 046 alSourcePausev core found.
 047 alSourcePlay core found.
 048 alSourceStop core found.
 049 alSourceRewind core found.
 050 alSourcePause core found.
 051 alSourceQueueBuffers core found.
 052 alSourceUnqueueBuffers core found.
 053 alGenBuffers core found.
 054 alDeleteBuffers core found.
 055 alIsBuffer core found.
 056 alBufferData core found.
 057 alBufferf core found.
 058 alBuffer3f core found.
 059 alBufferfv core found.
 060 alBufferi core found.
 061 alBuffer3i core found.
 062 alBufferiv core found.
 063 alGetBufferf core found.
 064 alGetBuffer3f core found.
 065 alGetBufferfv core found.
 066 alGetBufferi core found.
 067 alGetBuffer3i core found.
 068 alGetBufferiv core found.
 afxClass<File>::ConstructObject(06e3c6f0)
 /qwadro/afx//sound//qwadroDeepNote44kHz
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(0456e9b0)
 ERR afxStream.c:320?AfxMeasureStream
  
 ERR afxStream.c:320?AfxMeasureStream
  (((((afxFlags)(ios->flags)) & ((afxFlags)(afxIoFlag_X))) == (afxFlags)(afxIoFlag_X)))
    Invalid
 Dismantling File object (#0) 06e3c6f0...
 Destructing instance 06e3c6f0 of File class.
 Dismantling I/O Stream object (#0) 0456e9b0...
 Destructing instance 0456e9b0 of I/O Stream class.Sound device '
                         :::           :::       :::::::::                     
                       :+: :+:        :+:        :+:    :+:                    
                      +:+   +:+      +:+ +:+     +:+    +:+                    
                     +#++:++#++:    +#+  +:+     +#+    +:+                    
                     +#+     +#+   +#+#+#+#+#+   +#+    +#+                    
                     #+#     #+#         #+#     #+#    #+#                    
                     ###     ###         ###     #########                     
                                                                               
              Q W A D R O   E X E C U T I O N   E C O S Y S T E M              
                                                                               
                               Public Test Build                               
              (c) 2017 SIGMA Technology Group --- Federacao SIGMA              
                                www.sigmaco.org                                
                                                                               ' <'a4d'> registered on sound system
 afxSoundContext.c:50
  AfxAcquireSoundContexts(cnt=1,config=0022ee9c)
 afxClass<Sound Context, Sound Context>ConstructingObject(06f15540)
 afxClass<Sound Context>::ConstructObject(06f15540)
 afxClass<Sound Context>::ConstructObject(06f15540)
 salSctx.c:46
  _SalSctxCtor(sctx=06f15540)
 afxArena.c:768
  AfxAllocateArena(aren=06f15560)
 afxArena.c:769
  AfxAllocateArena(spec=00000000,hint="salSctx.c:66!_SalSctxCtor")
 Installing null at 06f155e8 by 06f15548...
 ERR afxClass.c:634?AfxMountClass
  
 ERR afxClass.c:634?AfxMountClass
  (config->fcc)
    Invalid
 ERR afxClass.c:636?AfxMountClass
  
 ERR afxClass.c:636?AfxMountClass
  (config->size)
    Invalid
 ERR afxClass.c:659?AfxMountClass
  
 ERR afxClass.c:659?AfxMountClass
  (config->name && config->name[0])
    Invalid
 afxClass<Draw Context, Draw Context>ConstructingObject(06f2c170)
 afxClass<Draw Context>::ConstructObject(06f2c170)
 afxClass<Draw Context>::ConstructObject(06f2c170)
 sglDctx.c:84
  _SglDctxCtor(dctx=06f2c170)
 afxArena.c:768
  AfxAllocateArena(aren=06f2c178)
 afxArena.c:769
  AfxAllocateArena(spec=00000000,hint="sglDctx.c:103!_SglDctxCtor")
 Installing GPU Synchronization Semaphore at 06f2c50c by 06f2c1e8...
 Installing GPU Synchronization Fence at 06f2c448 by 06f2c1e8...
 Installing Query Pool at 06f2c81c by 06f2c1e8...
 Installing Lego at 06f2c758 by 06f2c1e8...
 Installing Sampler at 06f2c9a4 by 06f2c1e8...
 Installing Buffer at 06f2c2c0 by 06f2c1e8...
 Installing Raster at 06f2c1fc by 06f2c1e8...
 Installing Canvas at 06f2c8e0 by 06f2c1e8...
 Installing Vertex Input at 06f2ca68 by 06f2c1e8...
 Installing Shader at 06f2c384 by 06f2c1e8...
 Installing Rasterizer at 06f2c5d0 by 06f2c1e8...
 Installing Pipeline at 06f2c694 by 06f2c1e8...
 afxClass<Draw Queue>::ConstructObject(06e1d330)
 sglDque_w32.c:1313
  _SglDqueCtor(dque=06e1d330)
 afxArena.c:768
  AfxAllocateArena(aren=06e1d37c)
 afxArena.c:769
  AfxAllocateArena(spec=00000000,hint="sglDque_w32.c:1339!_SglDqueCtor")
 afxClass<Draw Queue>::ConstructObject(06e1d400)
 sglDque_w32.c:1313
  _SglDqueCtor(dque=06e1d400)
 afxArena.c:768
  AfxAllocateArena(aren=06e1d44c)
 afxArena.c:769
  AfxAllocateArena(spec=00000000,hint="sglDque_w32.c:1339!_SglDqueCtor")
 Uploading pipeline 'data/pipeline/rgbaToRgba.xsh.xml'
 afxXml.c:1282
  AfxLoadXml(uri:data/pipeline/rgbaToRgba.xsh.xml)
 afxClass<File>::ConstructObject(06e3c6f0)
 /qwadro/afx//data//pipeline/rgbaToRgba.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(0456e9b0)
 # 0, @ 4294967295, [ 0, 0 ], [ 1, 9 ], Qwadro : null;
 # 1, @ 0, [ 0, 1 ], [ 10, 2 ], Shader : null;
 # 2, @ 0, [ 1, 1 ], [ 12, 2 ], Shader : null;
 # 3, @ 0, [ 2, 1 ], [ 14, 4 ], Shader : null;
 # 4, @ 0, [ 4, 1 ], [ 18, 4 ], Shader : null;
 # 5, @ 0, [ 6, 1 ], [ 22, 4 ], Shader : null;
 # 6, @ 0, [ 8, 1 ], [ 26, 4 ], Shader : null;
 # 7, @ 0, [ 0, 0 ], [ 30, 4 ], Pipeline : null;
 # 8, @ 0, [ 10, 1 ], [ 34, 4 ], Pipeline : null;
 # 9, @ 0, [ 0, 0 ], [ 38, 3 ], Rasterizer : null;
 # 10, @ 1, [ 0, 0 ], [ 0, 0 ], Stage : null;
 # 11, @ 1, [ 0, 0 ], [ 0, 0 ], Include : null;
 # 12, @ 2, [ 0, 0 ], [ 0, 0 ], Stage : null;
 # 13, @ 2, [ 0, 0 ], [ 0, 0 ], Include : null;
 # 14, @ 3, [ 0, 0 ], [ 0, 0 ], Stage : null;
 # 15, @ 3, [ 0, 0 ], [ 0, 0 ], Include : null;
 # 16, @ 3, [ 3, 1 ], [ 0, 0 ], Resource : null;
 # 17, @ 3, [ 0, 0 ], [ 0, 0 ], Out : null;
 # 18, @ 4, [ 0, 0 ], [ 0, 0 ], Stage : null;
 # 19, @ 4, [ 0, 0 ], [ 0, 0 ], Include : null;
 # 20, @ 4, [ 5, 1 ], [ 0, 0 ], Resource : null;
 # 21, @ 4, [ 0, 0 ], [ 0, 0 ], Out : null;
 # 22, @ 5, [ 0, 0 ], [ 0, 0 ], Stage : null;
 # 23, @ 5, [ 0, 0 ], [ 0, 0 ], Include : null;
 # 24, @ 5, [ 7, 1 ], [ 0, 0 ], Resource : null;
 # 25, @ 5, [ 0, 0 ], [ 0, 0 ], Out : null;
 # 26, @ 6, [ 0, 0 ], [ 0, 0 ], Stage : null;
 # 27, @ 6, [ 0, 0 ], [ 0, 0 ], Include : null;
 # 28, @ 6, [ 9, 1 ], [ 0, 0 ], Resource : null;
 # 29, @ 6, [ 0, 0 ], [ 0, 0 ], Out : null;
 # 30, @ 7, [ 0, 0 ], [ 0, 0 ], CullMode : null;
 # 31, @ 7, [ 0, 0 ], [ 0, 0 ], PrimitiveTopology : null;
 # 32, @ 7, [ 0, 0 ], [ 0, 0 ], VertexShader : null;
 # 33, @ 7, [ 0, 0 ], [ 0, 0 ], Rasterizer : null;
 # 34, @ 8, [ 0, 0 ], [ 0, 0 ], CullMode : null;
 # 35, @ 8, [ 0, 0 ], [ 0, 0 ], PrimitiveTopology : null;
 # 36, @ 8, [ 0, 0 ], [ 0, 0 ], VertexShader : null;
 # 37, @ 8, [ 0, 0 ], [ 0, 0 ], Rasterizer : null;
 # 38, @ 9, [ 0, 0 ], [ 0, 0 ], FillMode : null;
 # 39, @ 9, [ 0, 0 ], [ 0, 0 ], DepthWriteEnabled : null;
 # 40, @ 9, [ 0, 0 ], [ 0, 0 ], FragmentShader : null;
 Dismantling File object (#0) 06e3c6f0...
 Destructing instance 06e3c6f0 of File class.
 Dismantling I/O Stream object (#0) 0456e9b0...
 Destructing instance 0456e9b0 of I/O Stream class.
 data/pipeline/video/pushTristripQuadUv.vsh
 data/pipeline/rgbaToRgba.xsh.xml
 Uploading pipeline 'data/pipeline/rgbaToRgba.xsh.xml'
 afxXml.c:1282
  AfxLoadXml(uri:data/pipeline/rgbaToRgba.xsh.xml)
 afxClass<File>::ConstructObject(06e3c6f0)
 /qwadro/afx//data//pipeline/rgbaToRgba.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(0456e9b0)
 # 0, @ 4294967295, [ 0, 0 ], [ 1, 9 ], Qwadro : null;
 # 1, @ 0, [ 0, 1 ], [ 10, 2 ], Shader : null;
 # 2, @ 0, [ 1, 1 ], [ 12, 2 ], Shader : null;
 # 3, @ 0, [ 2, 1 ], [ 14, 4 ], Shader : null;
 # 4, @ 0, [ 4, 1 ], [ 18, 4 ], Shader : null;
 # 5, @ 0, [ 6, 1 ], [ 22, 4 ], Shader : null;
 # 6, @ 0, [ 8, 1 ], [ 26, 4 ], Shader : null;
 # 7, @ 0, [ 0, 0 ], [ 30, 4 ], Pipeline : null;
 # 8, @ 0, [ 10, 1 ], [ 34, 4 ], Pipeline : null;
 # 9, @ 0, [ 0, 0 ], [ 38, 3 ], Rasterizer : null;
 # 10, @ 1, [ 0, 0 ], [ 0, 0 ], Stage : null;
 # 11, @ 1, [ 0, 0 ], [ 0, 0 ], Include : null;
 # 12, @ 2, [ 0, 0 ], [ 0, 0 ], Stage : null;
 # 13, @ 2, [ 0, 0 ], [ 0, 0 ], Include : null;
 # 14, @ 3, [ 0, 0 ], [ 0, 0 ], Stage : null;
 # 15, @ 3, [ 0, 0 ], [ 0, 0 ], Include : null;
 # 16, @ 3, [ 3, 1 ], [ 0, 0 ], Resource : null;
 # 17, @ 3, [ 0, 0 ], [ 0, 0 ], Out : null;
 # 18, @ 4, [ 0, 0 ], [ 0, 0 ], Stage : null;
 # 19, @ 4, [ 0, 0 ], [ 0, 0 ], Include : null;
 # 20, @ 4, [ 5, 1 ], [ 0, 0 ], Resource : null;
 # 21, @ 4, [ 0, 0 ], [ 0, 0 ], Out : null;
 # 22, @ 5, [ 0, 0 ], [ 0, 0 ], Stage : null;
 # 23, @ 5, [ 0, 0 ], [ 0, 0 ], Include : null;
 # 24, @ 5, [ 7, 1 ], [ 0, 0 ], Resource : null;
 # 25, @ 5, [ 0, 0 ], [ 0, 0 ], Out : null;
 # 26, @ 6, [ 0, 0 ], [ 0, 0 ], Stage : null;
 # 27, @ 6, [ 0, 0 ], [ 0, 0 ], Include : null;
 # 28, @ 6, [ 9, 1 ], [ 0, 0 ], Resource : null;
 # 29, @ 6, [ 0, 0 ], [ 0, 0 ], Out : null;
 # 30, @ 7, [ 0, 0 ], [ 0, 0 ], CullMode : null;
 # 31, @ 7, [ 0, 0 ], [ 0, 0 ], PrimitiveTopology : null;
 # 32, @ 7, [ 0, 0 ], [ 0, 0 ], VertexShader : null;
 # 33, @ 7, [ 0, 0 ], [ 0, 0 ], Rasterizer : null;
 # 34, @ 8, [ 0, 0 ], [ 0, 0 ], CullMode : null;
 # 35, @ 8, [ 0, 0 ], [ 0, 0 ], PrimitiveTopology : null;
 # 36, @ 8, [ 0, 0 ], [ 0, 0 ], VertexShader : null;
 # 37, @ 8, [ 0, 0 ], [ 0, 0 ], Rasterizer : null;
 # 38, @ 9, [ 0, 0 ], [ 0, 0 ], FillMode : null;
 # 39, @ 9, [ 0, 0 ], [ 0, 0 ], DepthWriteEnabled : null;
 # 40, @ 9, [ 0, 0 ], [ 0, 0 ], FragmentShader : null;
 Dismantling File object (#0) 06e3c6f0...
 Destructing instance 06e3c6f0 of File class.
 Dismantling I/O Stream object (#0) 0456e9b0...
 Destructing instance 0456e9b0 of I/O Stream class.
 [!] afxXsh.c:573?AfxLoadRasterizationConfigFromXml
  Node 'DepthWriteEnabled' not handled.
 data/pipeline/video/sampleOutRgba2d.fsh
 afxClass<Rasterizer>::ConstructObject(06eccea0)
 sglRazr.c:85
  _SglRazrCtor(razr=06eccea0)
 afxClass<Pipeline>::ConstructObject(005af990)
 sglPip.c:512
  _SglPipCtor(pip=005af990)
 ERR afxBufferedString.c:342?AfxCopyString
  
 ERR afxBufferedString.c:342?AfxCopyString
  (in)
    Invalid
 ERR afxString.c:45?AfxGetStringLength
  
 ERR afxString.c:45?AfxGetStringLength
  (str)
    Invalid
 afxClass<File>::ConstructObject(06e3c6f0)
 /qwadro/afx//data//pipeline/video/pushTristripQuadUv.vsh
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(0456e9b0)
 afxClass<File>::ConstructObject(06e3c76c)
 /qwadro/afx//data//pipeline/stdEnv.inc
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(0456ea20)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 06e3c76c...
 Destructing instance 06e3c76c of File class.
 Dismantling I/O Stream object (#0) 0456ea20...
 Destructing instance 0456ea20 of I/O Stream class.
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 06e3c6f0...
 Destructing instance 06e3c6f0 of File class.
 Dismantling I/O Stream object (#0) 0456e9b0...
 Destructing instance 0456e9b0 of I/O Stream class.
 afxClass<File>::ConstructObject(06e3c6f0)
 /qwadro/afx//data//pipeline/video/sampleOutRgba2d.fsh
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(0456e9b0)
 afxClass<File>::ConstructObject(06e3c76c)
 /qwadro/afx//data//pipeline/stdEnv.inc
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(0456ea20)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 06e3c76c...
 Destructing instance 06e3c76c of File class.
 Dismantling I/O Stream object (#0) 0456ea20...
 Destructing instance 0456ea20 of I/O Stream class.
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 06e3c6f0...
 Destructing instance 06e3c6f0 of File class.
 Dismantling I/O Stream object (#0) 0456e9b0...
 Destructing instance 0456e9b0 of I/O Stream class.
 ð`ã
 afxClass<Lego>::ConstructObject(04577bf0)
 sglBsch.c:285
  _SglBschCtor(lego=04577bf0)
 afxClass<Sampler>::ConstructObject(06ea1d00)
 sglSamp.c:122
  _SglSampCtor(samp=06ea1d00)
 afxApplication.c:363
  AfxAcquireApplications(cnt=1,app=0022ee84,config=0022ee60)
 afxClass<Application>::ConstructObject(06f61930)
 afxApplication.c:256
  _AfxAppCtor(app=06f61930)
 afxThread.c:339
  AfxAcquireThreads(cnt=1,threads=06f61acc,config=0022e9c0,hint="afxApplication.c:266!_AfxAppCtor")
 afxClass<Thread>::ConstructObject(06f2cbd0)
 afxThread.c:263
  _AfxThrCtor(06f2cbd0)
 afxMouse.c:485
  AfxAcquireMouses(cnt=1,port=0022e9d4,mouses=06f61ad4)
 afxClass<Mouse, Human Input Device>ConstructingObject(04570150)
 afxClass<Human Input Device, Device>ConstructingObject(04570150)
 afxClass<Device>::ConstructObject(04570150)
 afxClass<Human Input Device>::ConstructObject(04570150)
 afxClass<Mouse>::ConstructObject(04570150)
 afxMouse.c:431
  _AfxMseCtor(mse=04570150)
 afxClass<Draw Input, Draw Input>ConstructingObject(06ecd260)
 afxClass<Draw Input>::ConstructObject(06ecd260)
 afxClass<Draw Input>::ConstructObject(06ecd260)
 Installing Vertex Buffer at 06ecd410 by 06ecd274...
 Installing Camera at 06ecd288 by 06ecd274...
 Installing Widget at 06f61a08 by 06f61930...
 afxApplication.c:174
  AfxRunApplication(app=06f61930)
 afxThread.c:204
  AfxRunThread(thr=06f2cbd0)
 mmplayer.c:337
  Once(app=06f61930)
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=7,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(06e36480)
 afxFile.c:553
  AfxReloadFile(uri=00f581dc,flags=5)
 afxClass<File>::ConstructObject(06e3c6f0)
 /qwadro/afx//art//world.tga
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=5,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(06e364f0)
 Dismantling File object (#0) 06e3c6f0...
 Destructing instance 06e3c6f0 of File class.
 Dismantling I/O Stream object (#0) 06e364f0...
 Destructing instance 06e364f0 of I/O Stream class.
 afxClass<Raster>::ConstructObject(06f2cdb0)
 sglRas.c:660
  _SglRasCtor(ras=06f2cdb0)
 Dismantling I/O Stream object (#0) 06e36480...
 Destructing instance 06e36480 of I/O Stream class.
 afxClass<File>::ConstructObject(06e3c6f0)
 /qwadro/afx//tmp//world2.tga
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=2,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(06e36480)
 Dismantling File object (#0) 06e3c6f0...
 Destructing instance 06e3c6f0 of File class.
 Dismantling I/O Stream object (#0) 06e36480...
 Destructing instance 06e36480 of I/O Stream class.
 Dismantling Raster object (#0) 06f2cdb0...
 Destructing instance 06f2cdb0 of Raster class.
 sglRas.c:637
  _SglRasDtor(ras=06f2cdb0)
 afxClass<Draw Output, Draw Output>ConstructingObject(06dfb2f0)
 afxClass<Draw Output>::ConstructObject(06dfb2f0)
 afxClass<Draw Output>::ConstructObject(06dfb2f0)
 sglDout_w32.c:256
  _SglDoutCtor(dout=06dfb2f0)
 Draw output (06dfb2f0) porportions readjusted. P 1.776903, R 1.777778 W -NaN
 Draw output (06dfb2f0) porportions readjusted. P 1.776903, R 1.777778 W 1.778859
 afxDrawOutput.c:374
  AfxRegenerateDrawOutputBuffers(dout=06dfb2f0)
 Draw output (06dfb2f0) whd readjusted to 536870912x1071993105; 1:0% of 0x1061434102.
 Draw output (06dfb2f0) porportions readjusted. P 1.776903, R 1.777778 W 1.855474
 afxDrawOutput.c:374
  AfxRegenerateDrawOutputBuffers(dout=06dfb2f0)
 Draw output (06dfb2f0) whd readjusted to 0x1071984367; 1:0% of 3758096384x1061371503.
 afxDrawOutput.c:374
  AfxRegenerateDrawOutputBuffers(dout=06dfb2f0)
 afxCanvas.c:262
  AfxAcquireCanvases(dctx=06f2c170,wh=[1271,685],layerCnt=1,surCnt=00000001)
 afxClass<Canvas>::ConstructObject(06f61b80)
 sglCanv.c:375
  _SglCanvCtor(canv=06f61b80)
 afxClass<Raster>::ConstructObject(06ecdc70)
 sglRas.c:660
  _SglRasCtor(ras=06ecdc70)
 afxClass<GPU Synchronization Semaphore>::ConstructObject(06e0dab0)
 afxClass<Draw Input, Draw Input>ConstructingObject(06ecde40)
 afxClass<Draw Input>::ConstructObject(06ecde40)
 afxClass<Draw Input>::ConstructObject(06ecde40)
 Installing Vertex Buffer at 06ecdff0 by 06ecde54...
 Installing Camera at 06ecde68 by 06ecde54...
 afxExecutable.c:243
  AfxLoadExecutables(cnt=1,executables=5cba8134,uri=0022e500)
 afxClass<Executable & Linkable File>::ConstructObject(004e58c0)
 afxExecutable.c:153
  _AfxExeCtor(uri:system/binkw32.dl_)
 /qwadro/afx//system32wd//binkw32.dl_
 /qwadro/afx//system32w//binkw32.dl_
 afxClass<Sampler>::ConstructObject(06ea1da0)
 sglSamp.c:122
  _SglSampCtor(samp=06ea1da0)
 Uploading pipeline 'data/pipeline/yv12ToRgba.xsh.xml?yFlipped'
 afxXml.c:1282
  AfxLoadXml(uri:data/pipeline/yv12ToRgba.xsh.xml)
 afxClass<File>::ConstructObject(06e3c6f0)
 /qwadro/afx//data//pipeline/yv12ToRgba.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(06e36480)
 # 0, @ 4294967295, [ 0, 0 ], [ 1, 10 ], Qwadro : null;
 # 1, @ 0, [ 0, 1 ], [ 11, 2 ], Shader : null;
 # 2, @ 0, [ 1, 1 ], [ 13, 2 ], Shader : null;
 # 3, @ 0, [ 2, 1 ], [ 15, 6 ], Shader : null;
 # 4, @ 0, [ 9, 1 ], [ 21, 6 ], Shader : null;
 # 5, @ 0, [ 16, 1 ], [ 27, 6 ], Shader : null;
 # 6, @ 0, [ 23, 1 ], [ 33, 6 ], Shader : null;
 # 7, @ 0, [ 30, 1 ], [ 39, 6 ], Shader : null;
 # 8, @ 0, [ 0, 0 ], [ 45, 4 ], Pipeline : null;
 # 9, @ 0, [ 37, 1 ], [ 49, 4 ], Pipeline : null;
 # 10, @ 0, [ 0, 0 ], [ 53, 3 ], Rasterizer : null;
 # 11, @ 1, [ 0, 0 ], [ 0, 0 ], Stage : null;
 # 12, @ 1, [ 0, 0 ], [ 0, 0 ], Include : null;
 # 13, @ 2, [ 0, 0 ], [ 0, 0 ], Stage : null;
 # 14, @ 2, [ 0, 0 ], [ 0, 0 ], Include : null;
 # 15, @ 3, [ 0, 0 ], [ 0, 0 ], Stage : null;
 # 16, @ 3, [ 0, 0 ], [ 0, 0 ], Include : null;
 # 17, @ 3, [ 3, 2 ], [ 0, 0 ], Resource : null;
 # 18, @ 3, [ 5, 2 ], [ 0, 0 ], Resource : null;
 # 19, @ 3, [ 7, 2 ], [ 0, 0 ], Resource : null;
 # 20, @ 3, [ 0, 0 ], [ 0, 0 ], Out : null;
 # 21, @ 4, [ 0, 0 ], [ 0, 0 ], Stage : null;
 # 22, @ 4, [ 0, 0 ], [ 0, 0 ], Include : null;
 # 23, @ 4, [ 10, 2 ], [ 0, 0 ], Resource : null;
 # 24, @ 4, [ 12, 2 ], [ 0, 0 ], Resource : null;
 # 25, @ 4, [ 14, 2 ], [ 0, 0 ], Resource : null;
 # 26, @ 4, [ 0, 0 ], [ 0, 0 ], Out : null;
 # 27, @ 5, [ 0, 0 ], [ 0, 0 ], Stage : null;
 # 28, @ 5, [ 0, 0 ], [ 0, 0 ], Include : null;
 # 29, @ 5, [ 17, 2 ], [ 0, 0 ], Resource : null;
 # 30, @ 5, [ 19, 2 ], [ 0, 0 ], Resource : null;
 # 31, @ 5, [ 21, 2 ], [ 0, 0 ], Resource : null;
 # 32, @ 5, [ 0, 0 ], [ 0, 0 ], Out : null;
 # 33, @ 6, [ 0, 0 ], [ 0, 0 ], Stage : null;
 # 34, @ 6, [ 0, 0 ], [ 0, 0 ], Include : null;
 # 35, @ 6, [ 24, 2 ], [ 0, 0 ], Resource : null;
 # 36, @ 6, [ 26, 2 ], [ 0, 0 ], Resource : null;
 # 37, @ 6, [ 28, 2 ], [ 0, 0 ], Resource : null;
 # 38, @ 6, [ 0, 0 ], [ 0, 0 ], Out : null;
 # 39, @ 7, [ 0, 0 ], [ 0, 0 ], Stage : null;
 # 40, @ 7, [ 0, 0 ], [ 0, 0 ], Include : null;
 # 41, @ 7, [ 31, 2 ], [ 0, 0 ], Resource : null;
 # 42, @ 7, [ 33, 2 ], [ 0, 0 ], Resource : null;
 # 43, @ 7, [ 35, 2 ], [ 0, 0 ], Resource : null;
 # 44, @ 7, [ 0, 0 ], [ 0, 0 ], Out : null;
 # 45, @ 8, [ 0, 0 ], [ 0, 0 ], CullMode : null;
 # 46, @ 8, [ 0, 0 ], [ 0, 0 ], PrimitiveTopology : null;
 # 47, @ 8, [ 0, 0 ], [ 0, 0 ], VertexShader : null;
 # 48, @ 8, [ 0, 0 ], [ 0, 0 ], Rasterizer : null;
 # 49, @ 9, [ 0, 0 ], [ 0, 0 ], CullMode : null;
 # 50, @ 9, [ 0, 0 ], [ 0, 0 ], PrimitiveTopology : null;
 # 51, @ 9, [ 0, 0 ], [ 0, 0 ], VertexShader : null;
 # 52, @ 9, [ 0, 0 ], [ 0, 0 ], Rasterizer : null;
 # 53, @ 10, [ 0, 0 ], [ 0, 0 ], FillMode : null;
 # 54, @ 10, [ 0, 0 ], [ 0, 0 ], DepthWriteEnabled : null;
 # 55, @ 10, [ 0, 0 ], [ 0, 0 ], FragmentShader : null;
 Dismantling File object (#0) 06e3c6f0...
 Destructing instance 06e3c6f0 of File class.
 Dismantling I/O Stream object (#0) 06e36480...
 Destructing instance 06e36480 of I/O Stream class.
 data/pipeline/video/pushTristripQuadUvFlippedY.vsh
 data/pipeline/yv12ToRgba.xsh.xml
 Uploading pipeline 'data/pipeline/yv12ToRgba.xsh.xml'
 afxXml.c:1282
  AfxLoadXml(uri:data/pipeline/yv12ToRgba.xsh.xml)
 afxClass<File>::ConstructObject(06e3c6f0)
 /qwadro/afx//data//pipeline/yv12ToRgba.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(06e36480)
 # 0, @ 4294967295, [ 0, 0 ], [ 1, 10 ], Qwadro : null;
 # 1, @ 0, [ 0, 1 ], [ 11, 2 ], Shader : null;
 # 2, @ 0, [ 1, 1 ], [ 13, 2 ], Shader : null;
 # 3, @ 0, [ 2, 1 ], [ 15, 6 ], Shader : null;
 # 4, @ 0, [ 9, 1 ], [ 21, 6 ], Shader : null;
 # 5, @ 0, [ 16, 1 ], [ 27, 6 ], Shader : null;
 # 6, @ 0, [ 23, 1 ], [ 33, 6 ], Shader : null;
 # 7, @ 0, [ 30, 1 ], [ 39, 6 ], Shader : null;
 # 8, @ 0, [ 0, 0 ], [ 45, 4 ], Pipeline : null;
 # 9, @ 0, [ 37, 1 ], [ 49, 4 ], Pipeline : null;
 # 10, @ 0, [ 0, 0 ], [ 53, 3 ], Rasterizer : null;
 # 11, @ 1, [ 0, 0 ], [ 0, 0 ], Stage : null;
 # 12, @ 1, [ 0, 0 ], [ 0, 0 ], Include : null;
 # 13, @ 2, [ 0, 0 ], [ 0, 0 ], Stage : null;
 # 14, @ 2, [ 0, 0 ], [ 0, 0 ], Include : null;
 # 15, @ 3, [ 0, 0 ], [ 0, 0 ], Stage : null;
 # 16, @ 3, [ 0, 0 ], [ 0, 0 ], Include : null;
 # 17, @ 3, [ 3, 2 ], [ 0, 0 ], Resource : null;
 # 18, @ 3, [ 5, 2 ], [ 0, 0 ], Resource : null;
 # 19, @ 3, [ 7, 2 ], [ 0, 0 ], Resource : null;
 # 20, @ 3, [ 0, 0 ], [ 0, 0 ], Out : null;
 # 21, @ 4, [ 0, 0 ], [ 0, 0 ], Stage : null;
 # 22, @ 4, [ 0, 0 ], [ 0, 0 ], Include : null;
 # 23, @ 4, [ 10, 2 ], [ 0, 0 ], Resource : null;
 # 24, @ 4, [ 12, 2 ], [ 0, 0 ], Resource : null;
 # 25, @ 4, [ 14, 2 ], [ 0, 0 ], Resource : null;
 # 26, @ 4, [ 0, 0 ], [ 0, 0 ], Out : null;
 # 27, @ 5, [ 0, 0 ], [ 0, 0 ], Stage : null;
 # 28, @ 5, [ 0, 0 ], [ 0, 0 ], Include : null;
 # 29, @ 5, [ 17, 2 ], [ 0, 0 ], Resource : null;
 # 30, @ 5, [ 19, 2 ], [ 0, 0 ], Resource : null;
 # 31, @ 5, [ 21, 2 ], [ 0, 0 ], Resource : null;
 # 32, @ 5, [ 0, 0 ], [ 0, 0 ], Out : null;
 # 33, @ 6, [ 0, 0 ], [ 0, 0 ], Stage : null;
 # 34, @ 6, [ 0, 0 ], [ 0, 0 ], Include : null;
 # 35, @ 6, [ 24, 2 ], [ 0, 0 ], Resource : null;
 # 36, @ 6, [ 26, 2 ], [ 0, 0 ], Resource : null;
 # 37, @ 6, [ 28, 2 ], [ 0, 0 ], Resource : null;
 # 38, @ 6, [ 0, 0 ], [ 0, 0 ], Out : null;
 # 39, @ 7, [ 0, 0 ], [ 0, 0 ], Stage : null;
 # 40, @ 7, [ 0, 0 ], [ 0, 0 ], Include : null;
 # 41, @ 7, [ 31, 2 ], [ 0, 0 ], Resource : null;
 # 42, @ 7, [ 33, 2 ], [ 0, 0 ], Resource : null;
 # 43, @ 7, [ 35, 2 ], [ 0, 0 ], Resource : null;
 # 44, @ 7, [ 0, 0 ], [ 0, 0 ], Out : null;
 # 45, @ 8, [ 0, 0 ], [ 0, 0 ], CullMode : null;
 # 46, @ 8, [ 0, 0 ], [ 0, 0 ], PrimitiveTopology : null;
 # 47, @ 8, [ 0, 0 ], [ 0, 0 ], VertexShader : null;
 # 48, @ 8, [ 0, 0 ], [ 0, 0 ], Rasterizer : null;
 # 49, @ 9, [ 0, 0 ], [ 0, 0 ], CullMode : null;
 # 50, @ 9, [ 0, 0 ], [ 0, 0 ], PrimitiveTopology : null;
 # 51, @ 9, [ 0, 0 ], [ 0, 0 ], VertexShader : null;
 # 52, @ 9, [ 0, 0 ], [ 0, 0 ], Rasterizer : null;
 # 53, @ 10, [ 0, 0 ], [ 0, 0 ], FillMode : null;
 # 54, @ 10, [ 0, 0 ], [ 0, 0 ], DepthWriteEnabled : null;
 # 55, @ 10, [ 0, 0 ], [ 0, 0 ], FragmentShader : null;
 Dismantling File object (#0) 06e3c6f0...
 Destructing instance 06e3c6f0 of File class.
 Dismantling I/O Stream object (#0) 06e36480...
 Destructing instance 06e36480 of I/O Stream class.
 [!] afxXsh.c:573?AfxLoadRasterizationConfigFromXml
  Node 'DepthWriteEnabled' not handled.
 data/pipeline/video/yv12OutRgba2dSigma.fsh
 afxClass<Rasterizer>::ConstructObject(06ecd060)
 sglRazr.c:85
  _SglRazrCtor(razr=06ecd060)
 afxClass<Pipeline>::ConstructObject(005afa60)
 sglPip.c:512
  _SglPipCtor(pip=005afa60)
 ERR afxBufferedString.c:342?AfxCopyString
  
 ERR afxBufferedString.c:342?AfxCopyString
  (in)
    Invalid
 ERR afxString.c:45?AfxGetStringLength
  
 ERR afxString.c:45?AfxGetStringLength
  (str)
    Invalid
 afxClass<File>::ConstructObject(06e3c6f0)
 /qwadro/afx//data//pipeline/video/pushTristripQuadUvFlippedY.vsh
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(06e36480)
 afxClass<File>::ConstructObject(06e3c76c)
 /qwadro/afx//data//pipeline/stdEnv.inc
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(06e364f0)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 06e3c76c...
 Destructing instance 06e3c76c of File class.
 Dismantling I/O Stream object (#0) 06e364f0...
 Destructing instance 06e364f0 of I/O Stream class.
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 06e3c6f0...
 Destructing instance 06e3c6f0 of File class.
 Dismantling I/O Stream object (#0) 06e36480...
 Destructing instance 06e36480 of I/O Stream class.
 afxClass<File>::ConstructObject(06e3c6f0)
 /qwadro/afx//data//pipeline/video/yv12OutRgba2dSigma.fsh
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(06e36480)
 afxClass<File>::ConstructObject(06e3c76c)
 /qwadro/afx//data//pipeline/stdEnv.inc
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(06e364f0)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 06e3c76c...
 Destructing instance 06e3c76c of File class.
 Dismantling I/O Stream object (#0) 06e364f0...
 Destructing instance 06e364f0 of I/O Stream class.
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 06e3c6f0...
 Destructing instance 06e3c6f0 of File class.
 Dismantling I/O Stream object (#0) 06e36480...
 Destructing instance 06e36480 of I/O Stream class.
  ²í
 afxClass<Lego>::ConstructObject(04577c3c)
 sglBsch.c:285
  _SglBschCtor(lego=04577c3c)
 /qwadro/afx//art//fmv/ubi.bik
 afxClass<Raster>::ConstructObject(06ecdd30)
 sglRas.c:660
  _SglRasCtor(ras=06ecdd30)
 afxClass<Raster>::ConstructObject(06ed2250)
 sglRas.c:660
  _SglRasCtor(ras=06ed2250)
 afxClass<Raster>::ConstructObject(06ed2310)
 sglRas.c:660
  _SglRasCtor(ras=06ed2310)
 afxClass<Raster>::ConstructObject(06ed4520)
 sglRas.c:660
  _SglRasCtor(ras=06ed4520)
 afxClass<Raster>::ConstructObject(06ed45e0)
 sglRas.c:660
  _SglRasCtor(ras=06ed45e0)
 afxClass<Raster>::ConstructObject(06e9af90)
 sglRas.c:660
  _SglRasCtor(ras=06e9af90)
 Draw output (06dfb2f0) porportions readjusted. P 1.776903, R 1.777778 W 1.777778
 afxDrawOutput.c:374
  AfxRegenerateDrawOutputBuffers(dout=06dfb2f0)
 Dismantling Canvas object (#0) 06f61b80...
 Destructing instance 06f61b80 of Canvas class.
 sglCanv.c:351
  _SglCanvDtor(canv=06f61b80)
 sglCanv.c:328
  _AfxCanvDropAllSurfaces(canv=06f61b80)
 Dismantling Raster object (#0) 06ecdc70...
 Destructing instance 06ecdc70 of Raster class.
 sglRas.c:637
  _SglRasDtor(ras=06ecdc70)
 Dismantling GPU Synchronization Semaphore object (#0) 06e0dab0...
 Destructing instance 06e0dab0 of GPU Synchronization Semaphore class.
 afxCanvas.c:262
  AfxAcquireCanvases(dctx=06f2c170,wh=[1280,720],layerCnt=1,surCnt=00000001)
 afxClass<Canvas>::ConstructObject(06f61b80)
 sglCanv.c:375
  _SglCanvCtor(canv=06f61b80)
 afxClass<Raster>::ConstructObject(06ecdc70)
 sglRas.c:660
  _SglRasCtor(ras=06ecdc70)
 afxClass<GPU Synchronization Semaphore>::ConstructObject(06ed7830)
 Draw output (06dfb2f0) whd readjusted to 1610612736x1071994197; 1:0% of 536870912x1061435943.
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=7,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(06e36480)
 afxFile.c:553
  AfxReloadFile(uri=0022e754,flags=5)
 afxClass<File>::ConstructObject(06e3c6f0)
 /qwadro/afx//art//vcr-mono-font-256.tga
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=5,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(06e364f0)
 Dismantling File object (#0) 06e3c6f0...
 Destructing instance 06e3c6f0 of File class.
 Dismantling I/O Stream object (#0) 06e364f0...
 Destructing instance 06e364f0 of I/O Stream class.
 afxClass<Raster>::ConstructObject(06e9b050)
 sglRas.c:660
  _SglRasCtor(ras=06e9b050)
 Dismantling I/O Stream object (#0) 06e36480...
 Destructing instance 06e36480 of I/O Stream class.
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=7,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(06e36480)
 afxFile.c:553
  AfxReloadFile(uri=0022e754,flags=5)
 afxClass<File>::ConstructObject(06e3c6f0)
 /qwadro/afx//art//vcr-mono-font-256-left.tga
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=5,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(06e364f0)
 Dismantling File object (#0) 06e3c6f0...
 Destructing instance 06e3c6f0 of File class.
 Dismantling I/O Stream object (#0) 06e364f0...
 Destructing instance 06e364f0 of I/O Stream class.
 afxClass<Raster>::ConstructObject(07db6fa0)
 sglRas.c:660
  _SglRasCtor(ras=07db6fa0)
 Dismantling I/O Stream object (#0) 06e36480...
 Destructing instance 06e36480 of I/O Stream class.
 Uploading pipeline 'data/pipeline/font.xsh.xml?instanced'
 afxXml.c:1282
  AfxLoadXml(uri:data/pipeline/font.xsh.xml)
 afxClass<File>::ConstructObject(06e3c6f0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(06e36480)
 # 0, @ 4294967295, [ 0, 0 ], [ 1, 12 ], Qwadro : null;
 # 1, @ 0, [ 0, 1 ], [ 13, 6 ], Shader : null;
 # 2, @ 0, [ 5, 1 ], [ 19, 6 ], Shader : null;
 # 3, @ 0, [ 10, 1 ], [ 25, 7 ], Shader : null;
 # 4, @ 0, [ 16, 1 ], [ 32, 5 ], Shader : null;
 # 5, @ 0, [ 19, 1 ], [ 37, 4 ], Shader : null;
 # 6, @ 0, [ 22, 1 ], [ 41, 4 ], Shader : null;
 # 7, @ 0, [ 0, 0 ], [ 45, 4 ], Pipeline : null;
 # 8, @ 0, [ 25, 1 ], [ 49, 4 ], Pipeline : null;
 # 9, @ 0, [ 26, 1 ], [ 53, 5 ], Pipeline : null;
 # 10, @ 0, [ 0, 0 ], [ 58, 3 ], Rasterizer : null;
 # 11, @ 0, [ 28, 1 ], [ 61, 3 ], Rasterizer : null;
 # 12, @ 0, [ 29, 1 ], [ 64, 3 ], Rasterizer : null;
 # 13, @ 1, [ 0, 0 ], [ 0, 0 ], Stage : null;
 # 14, @ 1, [ 0, 0 ], [ 0, 0 ], Include : null;
 # 15, @ 1, [ 0, 0 ], [ 0, 0 ], Include : null;
 # 16, @ 1, [ 1, 2 ], [ 0, 0 ], Resource : null;
 # 17, @ 1, [ 3, 1 ], [ 0, 0 ], In : null;
 # 18, @ 1, [ 4, 1 ], [ 0, 0 ], In : null;
 # 19, @ 2, [ 0, 0 ], [ 0, 0 ], Stage : null;
 # 20, @ 2, [ 0, 0 ], [ 0, 0 ], Include : null;
 # 21, @ 2, [ 0, 0 ], [ 0, 0 ], Include : null;
 # 22, @ 2, [ 6, 2 ], [ 0, 0 ], Resource : null;
 # 23, @ 2, [ 8, 1 ], [ 0, 0 ], In : null;
 # 24, @ 2, [ 9, 1 ], [ 0, 0 ], In : null;
 # 25, @ 3, [ 0, 0 ], [ 0, 0 ], Stage : null;
 # 26, @ 3, [ 0, 0 ], [ 0, 0 ], Include : null;
 # 27, @ 3, [ 0, 0 ], [ 0, 0 ], Include : null;
 # 28, @ 3, [ 11, 2 ], [ 0, 0 ], Resource : null;
 # 29, @ 3, [ 13, 1 ], [ 0, 0 ], In : null;
 # 30, @ 3, [ 14, 1 ], [ 0, 0 ], In : null;
 # 31, @ 3, [ 15, 1 ], [ 0, 0 ], In : null;
 # 32, @ 4, [ 0, 0 ], [ 0, 0 ], Stage : null;
 # 33, @ 4, [ 0, 0 ], [ 0, 0 ], Include : null;
 # 34, @ 4, [ 0, 0 ], [ 0, 0 ], Include : null;
 # 35, @ 4, [ 17, 2 ], [ 0, 0 ], Resource : null;
 # 36, @ 4, [ 0, 0 ], [ 0, 0 ], Out : null;
 # 37, @ 5, [ 0, 0 ], [ 0, 0 ], Stage : null;
 # 38, @ 5, [ 0, 0 ], [ 0, 0 ], Include : null;
 # 39, @ 5, [ 20, 2 ], [ 0, 0 ], Resource : null;
 # 40, @ 5, [ 0, 0 ], [ 0, 0 ], Out : null;
 # 41, @ 6, [ 0, 0 ], [ 0, 0 ], Stage : null;
 # 42, @ 6, [ 0, 0 ], [ 0, 0 ], Include : null;
 # 43, @ 6, [ 23, 2 ], [ 0, 0 ], Resource : null;
 # 44, @ 6, [ 0, 0 ], [ 0, 0 ], Out : null;
 # 45, @ 7, [ 0, 0 ], [ 0, 0 ], CullMode : null;
 # 46, @ 7, [ 0, 0 ], [ 0, 0 ], PrimitiveTopology : null;
 # 47, @ 7, [ 0, 0 ], [ 0, 0 ], VertexShader : null;
 # 48, @ 7, [ 0, 0 ], [ 0, 0 ], Rasterizer : null;
 # 49, @ 8, [ 0, 0 ], [ 0, 0 ], CullMode : null;
 # 50, @ 8, [ 0, 0 ], [ 0, 0 ], PrimitiveTopology : null;
 # 51, @ 8, [ 0, 0 ], [ 0, 0 ], VertexShader : null;
 # 52, @ 8, [ 0, 0 ], [ 0, 0 ], Rasterizer : null;
 # 53, @ 9, [ 0, 0 ], [ 0, 0 ], CullMode_ : null;
 # 54, @ 9, [ 0, 0 ], [ 0, 0 ], PrimitiveTopology : null;
 # 55, @ 9, [ 0, 0 ], [ 0, 0 ], VertexShader : null;
 # 56, @ 9, [ 27, 1 ], [ 0, 0 ], VertexInputStream : null;
 # 57, @ 9, [ 0, 0 ], [ 0, 0 ], Rasterizer : null;
 # 58, @ 10, [ 0, 0 ], [ 0, 0 ], FillMode : null;
 # 59, @ 10, [ 0, 0 ], [ 0, 0 ], DepthWriteEnabled : null;
 # 60, @ 10, [ 0, 0 ], [ 0, 0 ], FragmentShader : null;
 # 61, @ 11, [ 0, 0 ], [ 0, 0 ], FillMode : null;
 # 62, @ 11, [ 0, 0 ], [ 0, 0 ], DepthWriteEnabled : null;
 # 63, @ 11, [ 0, 0 ], [ 0, 0 ], FragmentShader : null;
 # 64, @ 12, [ 0, 0 ], [ 0, 0 ], FillMode : null;
 # 65, @ 12, [ 0, 0 ], [ 0, 0 ], DepthWriteEnabled : null;
 # 66, @ 12, [ 0, 0 ], [ 0, 0 ], FragmentShader : null;
 Dismantling File object (#0) 06e3c6f0...
 Destructing instance 06e3c6f0 of File class.
 Dismantling I/O Stream object (#0) 06e36480...
 Destructing instance 06e36480 of I/O Stream class.
 [!] afxXsh.c:846?AfxLoadPipelineConfigFromXml
  Node 'CullMode_' not handled.
 data/pipeline/font.xsh.xml?instancedVs
 data/pipeline/font.xsh.xml?instanced
 Uploading pipeline 'data/pipeline/font.xsh.xml?instanced'
 afxXml.c:1282
  AfxLoadXml(uri:data/pipeline/font.xsh.xml)
 afxClass<File>::ConstructObject(06e3c6f0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(06e36480)
 # 0, @ 4294967295, [ 0, 0 ], [ 1, 12 ], Qwadro : null;
 # 1, @ 0, [ 0, 1 ], [ 13, 6 ], Shader : null;
 # 2, @ 0, [ 5, 1 ], [ 19, 6 ], Shader : null;
 # 3, @ 0, [ 10, 1 ], [ 25, 7 ], Shader : null;
 # 4, @ 0, [ 16, 1 ], [ 32, 5 ], Shader : null;
 # 5, @ 0, [ 19, 1 ], [ 37, 4 ], Shader : null;
 # 6, @ 0, [ 22, 1 ], [ 41, 4 ], Shader : null;
 # 7, @ 0, [ 0, 0 ], [ 45, 4 ], Pipeline : null;
 # 8, @ 0, [ 25, 1 ], [ 49, 4 ], Pipeline : null;
 # 9, @ 0, [ 26, 1 ], [ 53, 5 ], Pipeline : null;
 # 10, @ 0, [ 0, 0 ], [ 58, 3 ], Rasterizer : null;
 # 11, @ 0, [ 28, 1 ], [ 61, 3 ], Rasterizer : null;
 # 12, @ 0, [ 29, 1 ], [ 64, 3 ], Rasterizer : null;
 # 13, @ 1, [ 0, 0 ], [ 0, 0 ], Stage : null;
 # 14, @ 1, [ 0, 0 ], [ 0, 0 ], Include : null;
 # 15, @ 1, [ 0, 0 ], [ 0, 0 ], Include : null;
 # 16, @ 1, [ 1, 2 ], [ 0, 0 ], Resource : null;
 # 17, @ 1, [ 3, 1 ], [ 0, 0 ], In : null;
 # 18, @ 1, [ 4, 1 ], [ 0, 0 ], In : null;
 # 19, @ 2, [ 0, 0 ], [ 0, 0 ], Stage : null;
 # 20, @ 2, [ 0, 0 ], [ 0, 0 ], Include : null;
 # 21, @ 2, [ 0, 0 ], [ 0, 0 ], Include : null;
 # 22, @ 2, [ 6, 2 ], [ 0, 0 ], Resource : null;
 # 23, @ 2, [ 8, 1 ], [ 0, 0 ], In : null;
 # 24, @ 2, [ 9, 1 ], [ 0, 0 ], In : null;
 # 25, @ 3, [ 0, 0 ], [ 0, 0 ], Stage : null;
 # 26, @ 3, [ 0, 0 ], [ 0, 0 ], Include : null;
 # 27, @ 3, [ 0, 0 ], [ 0, 0 ], Include : null;
 # 28, @ 3, [ 11, 2 ], [ 0, 0 ], Resource : null;
 # 29, @ 3, [ 13, 1 ], [ 0, 0 ], In : null;
 # 30, @ 3, [ 14, 1 ], [ 0, 0 ], In : null;
 # 31, @ 3, [ 15, 1 ], [ 0, 0 ], In : null;
 # 32, @ 4, [ 0, 0 ], [ 0, 0 ], Stage : null;
 # 33, @ 4, [ 0, 0 ], [ 0, 0 ], Include : null;
 # 34, @ 4, [ 0, 0 ], [ 0, 0 ], Include : null;
 # 35, @ 4, [ 17, 2 ], [ 0, 0 ], Resource : null;
 # 36, @ 4, [ 0, 0 ], [ 0, 0 ], Out : null;
 # 37, @ 5, [ 0, 0 ], [ 0, 0 ], Stage : null;
 # 38, @ 5, [ 0, 0 ], [ 0, 0 ], Include : null;
 # 39, @ 5, [ 20, 2 ], [ 0, 0 ], Resource : null;
 # 40, @ 5, [ 0, 0 ], [ 0, 0 ], Out : null;
 # 41, @ 6, [ 0, 0 ], [ 0, 0 ], Stage : null;
 # 42, @ 6, [ 0, 0 ], [ 0, 0 ], Include : null;
 # 43, @ 6, [ 23, 2 ], [ 0, 0 ], Resource : null;
 # 44, @ 6, [ 0, 0 ], [ 0, 0 ], Out : null;
 # 45, @ 7, [ 0, 0 ], [ 0, 0 ], CullMode : null;
 # 46, @ 7, [ 0, 0 ], [ 0, 0 ], PrimitiveTopology : null;
 # 47, @ 7, [ 0, 0 ], [ 0, 0 ], VertexShader : null;
 # 48, @ 7, [ 0, 0 ], [ 0, 0 ], Rasterizer : null;
 # 49, @ 8, [ 0, 0 ], [ 0, 0 ], CullMode : null;
 # 50, @ 8, [ 0, 0 ], [ 0, 0 ], PrimitiveTopology : null;
 # 51, @ 8, [ 0, 0 ], [ 0, 0 ], VertexShader : null;
 # 52, @ 8, [ 0, 0 ], [ 0, 0 ], Rasterizer : null;
 # 53, @ 9, [ 0, 0 ], [ 0, 0 ], CullMode_ : null;
 # 54, @ 9, [ 0, 0 ], [ 0, 0 ], PrimitiveTopology : null;
 # 55, @ 9, [ 0, 0 ], [ 0, 0 ], VertexShader : null;
 # 56, @ 9, [ 27, 1 ], [ 0, 0 ], VertexInputStream : null;
 # 57, @ 9, [ 0, 0 ], [ 0, 0 ], Rasterizer : null;
 # 58, @ 10, [ 0, 0 ], [ 0, 0 ], FillMode : null;
 # 59, @ 10, [ 0, 0 ], [ 0, 0 ], DepthWriteEnabled : null;
 # 60, @ 10, [ 0, 0 ], [ 0, 0 ], FragmentShader : null;
 # 61, @ 11, [ 0, 0 ], [ 0, 0 ], FillMode : null;
 # 62, @ 11, [ 0, 0 ], [ 0, 0 ], DepthWriteEnabled : null;
 # 63, @ 11, [ 0, 0 ], [ 0, 0 ], FragmentShader : null;
 # 64, @ 12, [ 0, 0 ], [ 0, 0 ], FillMode : null;
 # 65, @ 12, [ 0, 0 ], [ 0, 0 ], DepthWriteEnabled : null;
 # 66, @ 12, [ 0, 0 ], [ 0, 0 ], FragmentShader : null;
 Dismantling File object (#0) 06e3c6f0...
 Destructing instance 06e3c6f0 of File class.
 Dismantling I/O Stream object (#0) 06e36480...
 Destructing instance 06e36480 of I/O Stream class.
 [!] afxXsh.c:573?AfxLoadRasterizationConfigFromXml
  Node 'DepthWriteEnabled' not handled.
 data/pipeline/font.xsh.xml?instancedFs
 afxClass<Rasterizer>::ConstructObject(06ed6d00)
 sglRazr.c:85
  _SglRazrCtor(razr=06ed6d00)
 afxClass<Pipeline>::ConstructObject(06ed70d0)
 sglPip.c:512
  _SglPipCtor(pip=06ed70d0)
 ERR afxBufferedString.c:342?AfxCopyString
  
 ERR afxBufferedString.c:342?AfxCopyString
  (in)
    Invalid
 ERR afxString.c:45?AfxGetStringLength
  
 ERR afxString.c:45?AfxGetStringLength
  (str)
    Invalid
 afxClass<File>::ConstructObject(06e3c6f0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(06e36480)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 06e3c6f0...
 Destructing instance 06e3c6f0 of File class.
 Dismantling I/O Stream object (#0) 06e36480...
 Destructing instance 06e36480 of I/O Stream class.
 afxClass<File>::ConstructObject(06e3c6f0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(06e36480)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 06e3c6f0...
 Destructing instance 06e3c6f0 of File class.
 Dismantling I/O Stream object (#0) 06e36480...
 Destructing instance 06e36480 of I/O Stream class.
  ÷í
 afxClass<Buffer>::ConstructObject(0050d260)
 sglBuf.c:316
  _SglBufCtor(buf=0050d260)
 afxClass<Sampler>::ConstructObject(07db81e0)
 sglSamp.c:122
  _SglSampCtor(samp=07db81e0)
 afxClass<Buffer>::ConstructObject(0050d2c4)
 sglBuf.c:316
  _SglBufCtor(buf=0050d2c4)
 afxClass<Draw Script>::ConstructObject(06ee1200)
 sglDscr.c:126
  _SglDscrCtor(dscr=06ee1200)
 afxArena.c:768
  AfxAllocateArena(aren=06ee1218)
 afxArena.c:769
  AfxAllocateArena(spec=00000000,hint="sglDscr.c:142!_SglDscrCtor")
 afxRaster 06ecdc70 hardware-side data instanced. Target de1, format 8051, whd [1280,720,1]
 afxCanvas 06f61b80 hardware-side data instanced.
 afxClass<File>::ConstructObject(06e3c6f0)
 /qwadro/afx//data//pipeline/video/pushTristripQuadUvFlippedY.vsh
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(06e36480)
 afxClass<File>::ConstructObject(06e3c76c)
 /qwadro/afx//data//pipeline/stdEnv.inc
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(06e364f0)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 06e3c76c...
 Destructing instance 06e3c76c of File class.
 Dismantling I/O Stream object (#0) 06e364f0...
 Destructing instance 06e364f0 of I/O Stream class.
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 06e3c6f0...
 Destructing instance 06e3c6f0 of File class.
 Dismantling I/O Stream object (#0) 06e36480...
 Destructing instance 06e36480 of I/O Stream class.
 #version 330 core // QWADRO. Engineered by SIGMA Technology Group.

#define afxInt int
#define afxNat uint

#define afxReal float

#define afxV2d vec2
#define afxV3d vec3
#define afxV4d vec4

#define afxM2d mat2
#define afxM3d mat3
#define afxM4d mat4

#define float2 vec2
#define float3 vec3
#define float4 vec4

#define IN(_location_, _type_, _name_) layout(location = _location_) _type_ _name_
#define OUT(_location_, _type_, _name_) layout(location = _location_) _type_ _name_
#define UNIFORM(_set_, _binding_, _type_, _name_) uniform _type_ _name_
#define MULTIFORM(_set_, _binding_, _type_, _name_, _count_) _type_ _name_[_count_]

const vec3 tristrippedQuadPos[4] = vec3[](vec3(-1,  1, 0), vec3(-1, -1, 0), vec3(1,  1, 0), vec3(1, -1, 0));
const vec2 tristrippedQuadUv[4] = vec2[](vec2(0, 0), vec2(0, 1), vec2(1, 0), vec2(1, 1));

out block
{
    vec2 uv0;
} sgl_v;

void main()
{
    // draw tristrip with 4 tris.
    gl_Position = vec4(tristrippedQuadPos[gl_VertexID], 1.0);
    sgl_v.uv0 = tristrippedQuadUv[gl_VertexID];
}

 afxClass<File>::ConstructObject(06e3c6f0)
 /qwadro/afx//data//pipeline/video/yv12OutRgba2dSigma.fsh
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(06e36480)
 afxClass<File>::ConstructObject(06e3c76c)
 /qwadro/afx//data//pipeline/stdEnv.inc
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(06e364f0)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 06e3c76c...
 Destructing instance 06e3c76c of File class.
 Dismantling I/O Stream object (#0) 06e364f0...
 Destructing instance 06e364f0 of I/O Stream class.
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 06e3c6f0...
 Destructing instance 06e3c6f0 of File class.
 Dismantling I/O Stream object (#0) 06e36480...
 Destructing instance 06e36480 of I/O Stream class.
 #version 330 core // QWADRO. Engineered by SIGMA Technology Group.

#define afxInt int
#define afxNat uint

#define afxReal float

#define afxV2d vec2
#define afxV3d vec3
#define afxV4d vec4

#define afxM2d mat2
#define afxM3d mat3
#define afxM4d mat4

#define float2 vec2
#define float3 vec3
#define float4 vec4

#define IN(_location_, _type_, _name_) layout(location = _location_) _type_ _name_
#define OUT(_location_, _type_, _name_) layout(location = _location_) _type_ _name_
#define UNIFORM(_set_, _binding_, _type_, _name_) uniform _type_ _name_
#define MULTIFORM(_set_, _binding_, _type_, _name_, _count_) _type_ _name_[_count_]

UNIFORM(0, 0, sampler2D, samp0);
UNIFORM(0, 1, sampler2D, samp1);
UNIFORM(0, 2, sampler2D, samp2);

in block
{
    vec2 uv0;
} sgl_v;

OUT(0, vec4, sgl_rgba);

void main()
{
    vec3 yuv;
    yuv.x = texture(samp0, sgl_v.uv0).r;
    yuv.y = texture(samp2, sgl_v.uv0).r - 0.5;
    yuv.z = texture(samp1, sgl_v.uv0).r - 0.5;
    
    vec3 rgb = mat3( 1, 1, 1, 0, -0.34414, 1.772, 1.402, -0.71414, 0) * yuv;
    sgl_rgba = vec4(rgb, 1);
}

 afxPipeline 005afa60 hardware-side data instanced.
 afxRaster 06ecdd30 hardware-side data instanced. Target de1, format 8229, whd [1280,720,1]
 afxSampler 06ea1da0 hardware-side data instanced.
 afxRaster 06ed2250 hardware-side data instanced. Target de1, format 8229, whd [640,360,1]
 afxRaster 06ed2310 hardware-side data instanced. Target de1, format 8229, whd [640,360,1]
 afxClass<File>::ConstructObject(06e3c6f0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 06e3c6f0...
 Destructing instance 06e3c6f0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 1, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(06e3c6f0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 06e3c6f0...
 Destructing instance 06e3c6f0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 2, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxRaster 06ed4520 hardware-side data instanced. Target de1, format 8229, whd [1280,720,1]
 afxRaster 06ed45e0 hardware-side data instanced. Target de1, format 8229, whd [640,360,1]
 afxRaster 06e9af90 hardware-side data instanced. Target de1, format 8229, whd [640,360,1]
 afxClass<File>::ConstructObject(07de1760)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(0456e9b0)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 07de1760...
 Destructing instance 07de1760 of File class.
 Dismantling I/O Stream object (#0) 0456e9b0...
 Destructing instance 0456e9b0 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 4, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(07de1760)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(0456e9b0)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 07de1760...
 Destructing instance 07de1760 of File class.
 Dismantling I/O Stream object (#0) 0456e9b0...
 Destructing instance 0456e9b0 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 5, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(07de1760)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(0456e9b0)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 07de1760...
 Destructing instance 07de1760 of File class.
 Dismantling I/O Stream object (#0) 0456e9b0...
 Destructing instance 0456e9b0 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 6, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(07de1760)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(0456e9b0)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 07de1760...
 Destructing instance 07de1760 of File class.
 Dismantling I/O Stream object (#0) 0456e9b0...
 Destructing instance 0456e9b0 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 7, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(07de1760)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(0456e9b0)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 07de1760...
 Destructing instance 07de1760 of File class.
 Dismantling I/O Stream object (#0) 0456e9b0...
 Destructing instance 0456e9b0 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 8, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(07de1760)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(0456e9b0)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 07de1760...
 Destructing instance 07de1760 of File class.
 Dismantling I/O Stream object (#0) 0456e9b0...
 Destructing instance 0456e9b0 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 9, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(07de1760)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(0456e9b0)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 07de1760...
 Destructing instance 07de1760 of File class.
 Dismantling I/O Stream object (#0) 0456e9b0...
 Destructing instance 0456e9b0 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 10, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(07de1760)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(0456e9b0)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 07de1760...
 Destructing instance 07de1760 of File class.
 Dismantling I/O Stream object (#0) 0456e9b0...
 Destructing instance 0456e9b0 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 11, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(07de1760)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(0456e9b0)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 07de1760...
 Destructing instance 07de1760 of File class.
 Dismantling I/O Stream object (#0) 0456e9b0...
 Destructing instance 0456e9b0 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 12, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(07de1760)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(0456e9b0)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 07de1760...
 Destructing instance 07de1760 of File class.
 Dismantling I/O Stream object (#0) 0456e9b0...
 Destructing instance 0456e9b0 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 13, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(07de1760)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(0456e9b0)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 07de1760...
 Destructing instance 07de1760 of File class.
 Dismantling I/O Stream object (#0) 0456e9b0...
 Destructing instance 0456e9b0 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 14, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(07de1760)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(0456e9b0)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 07de1760...
 Destructing instance 07de1760 of File class.
 Dismantling I/O Stream object (#0) 0456e9b0...
 Destructing instance 0456e9b0 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 15, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(07de1760)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(0456e9b0)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 07de1760...
 Destructing instance 07de1760 of File class.
 Dismantling I/O Stream object (#0) 0456e9b0...
 Destructing instance 0456e9b0 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 16, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 17, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 18, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 19, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 20, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 21, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 22, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 23, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 24, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 25, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 26, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 27, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 28, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 29, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 30, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 31, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 32, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 33, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 34, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 35, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 36, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 37, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 38, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 39, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 40, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 41, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 42, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 43, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 44, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 45, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 46, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 47, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 48, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 49, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 50, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 51, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 52, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 53, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 54, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 55, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 56, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 57, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 58, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 59, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 60, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 61, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 62, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 63, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 64, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 65, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 66, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 67, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 68, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 69, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 70, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 71, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 72, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 73, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 74, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 75, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 76, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 77, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 78, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 79, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 80, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 81, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 82, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 83, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 84, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 85, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 86, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 87, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 88, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 89, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 90, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 91, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 92, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 93, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 94, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 95, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 96, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 97, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 98, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 99, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 100, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 101, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 102, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 103, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 104, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 105, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 106, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 107, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 108, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 109, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 110, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 111, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 112, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 113, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 114, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 115, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 116, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 117, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 118, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 119, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 120, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 121, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 122, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 123, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 124, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 125, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 126, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 127, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 128, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 129, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 130, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 131, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 132, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 133, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 134, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 135, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 136, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 137, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 138, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 139, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 140, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 141, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 142, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 143, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 144, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 145, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 146, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 147, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 148, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 149, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 150, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 151, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 152, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 153, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 154, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 155, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 156, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 157, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 158, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 159, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 160, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 161, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 162, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 163, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 164, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 165, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 166, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 167, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 168, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 169, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 170, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 171, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 172, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 173, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 174, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 175, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 176, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 177, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 178, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 179, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 180, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 181, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 182, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 183, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 184, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 185, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 186, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 187, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 188, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 189, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 190, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 191, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 192, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 193, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 194, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 195, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 196, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 197, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 198, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 199, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 200, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 201, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 202, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 203, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 204, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 205, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 206, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 207, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 208, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 209, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 210, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 211, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 212, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 213, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 214, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 215, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 216, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 217, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 218, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 219, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 220, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 221, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 222, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 223, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 224, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 225, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 226, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 227, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 228, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 229, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 230, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 231, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 232, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 233, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 234, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 235, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 236, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 237, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 238, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 239, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 240, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 241, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 242, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 243, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 244, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 245, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 246, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 247, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 248, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 249, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 250, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 251, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 252, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 253, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 254, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 255, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 256, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 257, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 258, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 259, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 260, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 261, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 262, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 263, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 264, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 265, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 266, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 267, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 268, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 269, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 270, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 271, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 272, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 273, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 274, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 275, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 276, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 277, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 278, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 279, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 280, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 281, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 282, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 283, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 284, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 285, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 286, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 287, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 288, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 289, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 290, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 291, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 292, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 293, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 294, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 295, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 296, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 297, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 298, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 299, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 300, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 301, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 302, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 303, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 304, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 305, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 306, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 307, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 308, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 309, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 310, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 311, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 312, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 313, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 314, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 315, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 316, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 317, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 318, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 319, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 320, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 321, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 322, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 323, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 324, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 325, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 326, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 327, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 328, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 329, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 330, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 331, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 332, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 333, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 334, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 335, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 336, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 337, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 338, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 339, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 340, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 341, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 342, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 343, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 344, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 345, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 346, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 347, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 348, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 349, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 350, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 351, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 352, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 353, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 354, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 355, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:323?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:325?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:456?_SglDpuBindAndSyncPip
  (gl->IsProgram(glHandle))
    Invalid
 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)
 ERR afxFile.c:205?AfxReadFileString
  
 Dismantling File object (#0) 00516bd0...
 Destructing instance 00516bd0 of File class.
 Dismantling I/O Stream object (#0) 07de1760...
 Destructing instance 07de1760 of I/O Stream class.
 ERR sglDdrv_w32.c:1792?_glDbgMsgCb
  SHADER COMPILER ERROR HIGH 0 GLSL compile failed for shader 356, "": ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 <Qwadro>
    <Shader id='vs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[

        //uniform mat4 pvm;
        /*uniform*/ vec4 color = vec4(1.0f);

        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0, 1);
            sgl_v.uv0 = in_uv0;
            sgl_v.rgba = color;
        }
        ]]>
    </Shader>
    <Shader id='vs2'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_pos</In>
        <In location='1'>vec2 in_uv0</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_pos;
        layout(location = 1) in vec2 in_uv0;

        out block
        {
            vec2 uv0;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4(in_pos, 0.0, 1.0);
            sgl_v.uv0 = in_uv0;
        }
        ]]>
    </Shader>
    <Shader id='instancedVs'>
        <Stage>VERTEX</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource set='0' type='CONSTANT_BUFFER'>sgl_view</Resource>
        <In location='0'>vec2 in_instPos</In>
        <In location='1'>vec2 in_instUV</In>
        <In location='2'>vec4 in_instRgba</In>
        <![CDATA[
        
        layout(location = 0) in vec2 in_instPos;
        layout(location = 1) in vec2 in_instUv;
        layout(location = 2) in vec4 in_instRgba;

        IN(0, vec2, in_instPos);
        IN(1, vec2, in_instUv);
        IN(2, vec2, in_instRgba);

        const vec2 pos[4] =
        {
            vec2( 0, 16),
            vec2( 0, 0),
            vec2(16, 16),
            vec2(16, 0)
        };
        const vec2 uv[4] =
        {
            vec2(0.00625, -0.00625),
            vec2(0.00625, -0.05625),
            vec2(0.05625, -0.00625),
            vec2(0.05652, -0.05625)
        };

        out block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        void main()
        {
            gl_Position = p * vec4((pos[gl_VertexID] + in_instPos), 0.0, 1.0);
            sgl_v.uv = uv[gl_VertexID] + in_instUv;
            sgl_v.rgba = in_instRgba;
        }
        ]]>
    </Shader>
    <Shader id='fs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Include>data/pipeline/stdView.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;

        in block
        {
            vec2 uv0;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {
            sgl_rgba = sgl_v.rgba * texture(samp, sgl_v.uv0).rgba;
        }
        ]]>
    </Shader>
    <Shader id='fs2'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>samp</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D samp;
        vec3 textColor = vec3(0.8, 0.8, 0.8);

        in block
        {
            vec2 uv0;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;

        void main()
        {    
            vec4 sampled = texture(samp, sgl_v.uv0); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = vec4(textColor, 1.0) * sampled;
        }
        ]]>
    </Shader>
    <Shader id='instancedFs'>
        <Stage>FRAGMENT</Stage>
        <Include>data/pipeline/stdEnv.inc</Include>
        <Resource binding='1' type='COMBINED_IMAGE_SAMPLER'>atlas</Resource>
        <Out>vec4 sgl_rgba</Out>
        <![CDATA[

        uniform sampler2D atlas;
        
        UNIFORM(0, 0, sampler2D, atlas);
        
        in block
        {
            vec2 uv;
            vec4 rgba;
        } sgl_v;

        layout(location = 0) out vec4 sgl_rgba;
        
        OUT(0, vec4, sgl_rgba);

        void main()
        {    
            vec4 sampled = texture(atlas, sgl_v.uv); //vec4(1.0, 1.0, 1.0, texture(samp, sgl_v.uv0).a);
            sgl_rgba = sgl_v.rgba * sampled;
        }
        ]]>
    </Shader>
    <Pipeline>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml</Rasterizer>
    </Pipeline>
    <Pipeline id='2'>
        <CullMode>BACK</CullMode>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?vs2</VertexShader>
        <Rasterizer>data/pipeline/font.xsh.xml?2</Rasterizer>
    </Pipeline>
    <Pipeline id='instanced'>
        <CullMode_>BACK</CullMode_>
        <PrimitiveTopology>TRI_STRIP</PrimitiveTopology>
        <VertexShader>data/pipeline/font.xsh.xml?instancedVs</VertexShader>
        <VertexInputStream instanceRate='1'>0</VertexInputStream>
        <Rasterizer>data/pipeline/font.xsh.xml?instanced</Rasterizer>
    </Pipeline>
    <Rasterizer>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs</FragmentShader>
    </Rasterizer>
    <Rasterizer id='2'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?fs2</FragmentShader>
    </Rasterizer>
    <Rasterizer id='instanced'>
        <FillMode>SOLID</FillMode>
        <DepthWriteEnabled></DepthWriteEnabled>
        <FragmentShader>data/pipeline/font.xsh.xml?instancedFs</FragmentShader>
    </Rasterizer>
</Qwadro>

 ERR sglPip.c:272?_SglDpuBindAndSyncPip
  
 ERR sglPip.c:274?_SglDpuBindAndSyncPip
  ERROR: 0:1: '' : syntax error: #version is mandatory and should be set before any other token


 afxClass<File>::ConstructObject(00516bd0)
 /qwadro/afx//data//pipeline/font.xsh.xml
 afxStream.c:1200
  AfxAcquireStream(cap=0,flags=1,start=00000000,range=0)
 afxClass<I/O Stream>::ConstructObject(07de1760)