Booting up...
Acquiring thread...  6472 "afxSystem_w32.c:496"Mounting... <//./z/>(''),5Mounting... <//./z/>('E:\qwadro\afx\system'),5Mounting... <//./z/>('E:\qwadro\afx\system32'),7Mounting... <//./z/>('E:\qwadro\afx\system32d'),7Mounting... <//./c/>('C:\'),7Mounting... <//./e/>('E:\'),7Mounting... <//./f/>('F:\'),7Mounting... <//./g/>('G:\'),7Mounting... <//./h/>('H:\'),7Mounting... <//./i/>('I:\'),7Loading module... <e2coree>Memory Page Size: 4096HW Threading Capacity: 2Doing the AVX start up...Loading module... <e2draw>Loading module... <targl4.dll>Installable client driver discovered.
	Device: TARGA over OpenGL 4
	Driver: Truecolor Advanced Raster Graphics Accelerator
	Version: 4.0.16385
	Provider: SIGMA Technology Group <https://sigmaco.org>
Doing the ASX start up...Loading module... <e2sound>Loading module... <oal4d.dll>Installable client driver discovered.
	Device: A4D Waveform Accoustics Accelerator
	Driver: A4D over OpenAL 1
	Version: 0.1.1514
	Provider: SIGMA Technology Group <https://sigmaco.org>
Doing the AUX start up...Loading module... <e2ux>Acquiring HID at port 0Mounting... <//./c/>('E:\qwadro\afx\system'),7Entering the Thread Execution Environment 6472
Mounting... <//./art/>('E:\qwadro\afx\art'),5Loading module... <opengl32.dll>Listing mem available display devices...
#0 = Intel(R) HD Graphics (\\.\DISPLAY1) 8080005#1 = RDPDD Chained DD (\\.\DISPLAYV1) 200008#2 = RDP Encoder Mirror Driver (\\.\DISPLAYV2) 200008#3 = RDP Reflector Display Driver (\\.\DISPLAYV3) 200008Acquiring thread...  0 "sglDdev_w32.c:1295"Entering the Thread Execution Environment 8920
Starting 8920 on thread execution unit #1...Entering the Thread Execution Environment 6472
Installing watcher <002e9308> for 002e2ff8...Entering the Thread Execution Environment 8920
Creating transient OpenGL context000 wglMakeContextCurrentARB core found.000 wglGetCurrentReadDCARB core found.000 wglCreateContextAttribsARB core found.000 wglChoosePixelFormatARB core found.000 wglSwapIntervalEXT core found.000 wglGetExtensionsStringARB core found.Creating definitive OpenGL context000 wglMakeContextCurrentARB core found.000 wglGetCurrentReadDCARB core found.000 wglCreateContextAttribsARB core found.000 wglChoosePixelFormatARB core found.000 wglSwapIntervalEXT core found.000 wglGetExtensionsStringARB core found.391 glReleaseShaderCompiler core found.392 glShaderBinary core found.393 glGetShaderPrecisionFormat core found.394 glDepthRangef core found.395 glClearDepthf core found.396 glGetProgramBinary core found.397 glProgramBinary core found.398 glProgramParameteri core found.399 glUseProgramStages core found.400 glActiveShaderProgram core found.401 glCreateShaderProgramv core found.402 glBindProgramPipeline core found.403 glDeleteProgramPipelines core found.404 glGenProgramPipelines core found.405 glIsProgramPipeline core found.406 glGetProgramPipelineiv core found.407 glProgramUniform1i core found.408 glProgramUniform1iv core found.409 glProgramUniform1f core found.410 glProgramUniform1fv core found.411 glProgramUniform1d core found.412 glProgramUniform1dv core found.413 glProgramUniform1ui core found.414 glProgramUniform1uiv core found.415 glProgramUniform2i core found.416 glProgramUniform2iv core found.417 glProgramUniform2f core found.418 glProgramUniform2fv core found.419 glProgramUniform2d core found.420 glProgramUniform2dv core found.421 glProgramUniform2ui core found.422 glProgramUniform2uiv core found.423 glProgramUniform3i core found.424 glProgramUniform3iv core found.425 glProgramUniform3f core found.426 glProgramUniform3fv core found.427 glProgramUniform3d core found.428 glProgramUniform3dv core found.429 glProgramUniform3ui core found.430 glProgramUniform3uiv core found.431 glProgramUniform4i core found.432 glProgramUniform4iv core found.433 glProgramUniform4f core found.434 glProgramUniform4fv core found.435 glProgramUniform4d core found.436 glProgramUniform4dv core found.437 glProgramUniform4ui core found.438 glProgramUniform4uiv core found.439 glProgramUniformMatrix2fv core found.440 glProgramUniformMatrix3fv core found.441 glProgramUniformMatrix4fv core found.442 glProgramUniformMatrix2dv core found.443 glProgramUniformMatrix3dv core found.444 glProgramUniformMatrix4dv core found.445 glProgramUniformMatrix2x3fv core found.446 glProgramUniformMatrix3x2fv core found.447 glProgramUniformMatrix2x4fv core found.448 glProgramUniformMatrix4x2fv core found.449 glProgramUniformMatrix3x4fv core found.450 glProgramUniformMatrix4x3fv core found.451 glProgramUniformMatrix2x3dv core found.452 glProgramUniformMatrix3x2dv core found.453 glProgramUniformMatrix2x4dv core found.454 glProgramUniformMatrix4x2dv core found.455 glProgramUniformMatrix3x4dv core found.456 glProgramUniformMatrix4x3dv core found.457 glValidateProgramPipeline core found.458 glGetProgramPipelineInfoLog core found.459 glVertexAttribL1d core found.460 glVertexAttribL2d core found.461 glVertexAttribL3d core found.462 glVertexAttribL4d core found.463 glVertexAttribL1dv core found.464 glVertexAttribL2dv core found.465 glVertexAttribL3dv core found.466 glVertexAttribL4dv core found.467 glVertexAttribLPointer core found.468 glGetVertexAttribLdv core found.469 glViewportArrayv core found.470 glViewportIndexedf core found.471 glViewportIndexedfv core found.472 glScissorArrayv core found.473 glScissorIndexed core found.474 glScissorIndexedv core found.475 glDepthRangeArrayv core found.476 glDepthRangeIndexed core found.477 glGetFloati_v core found.478 glGetDoublei_v core found.479 glDrawArraysInstancedBaseInstance core found.480 glDrawElementsInstancedBaseInstance core found.481 glDrawElementsInstancedBaseVertexBaseInstance core found.482 glGetInternalformativ core found.483 glGetActiveAtomicCounterBufferiv core found.484 glBindImageTexture core found.485 glMemoryBarrier core found.486 glTexStorage1D core found.487 glTexStorage2D core found.488 glTexStorage3D core found.489 glDrawTransformFeedbackInstanced core found.490 glDrawTransformFeedbackStreamInstanced core found.493 glDispatchCompute core found.494 glDispatchComputeIndirect core found.496 glFramebufferParameteri core found.497 glGetFramebufferParameteriv core found.498 glGetInternalformati64v core found.503 glInvalidateFramebuffer core found.504 glInvalidateSubFramebuffer core found.505 glMultiDrawArraysIndirect core found.506 glMultiDrawElementsIndirect core found.507 glGetProgramInterfaceiv core found.508 glGetProgramResourceIndex core found.509 glGetProgramResourceName core found.510 glGetProgramResourceiv core found.511 glGetProgramResourceLocation core found.512 glGetProgramResourceLocationIndex core found.513 glShaderStorageBlockBinding core found.514 glTexBufferRange core found.515 glTexStorage2DMultisample core found.516 glTexStorage3DMultisample core found.518 glBindVertexBuffer core found.519 glVertexAttribFormat core found.520 glVertexAttribIFormat core found.521 glVertexAttribLFormat core found.522 glVertexAttribBinding core found.523 glVertexBindingDivisor core found.524 glDebugMessageControl core found.525 glDebugMessageInsert core found.526 glDebugMessageCallback core found.527 glGetDebugMessageLog core found.528 glPushDebugGroup core found.529 glPopDebugGroup core found.530 glObjectLabel core found.531 glGetObjectLabel core found.532 glObjectPtrLabel core found.533 glGetObjectPtrLabel core found.534 glBufferStorage core found.543 glClipControlEXT ext found.551 glNamedBufferStorageEXT ext found.589 glTextureBufferRangeEXT ext found.606 glTextureParameteriEXT ext found.641 glMemoryBarrierByRegion core found.644 glGetGraphicsResetStatusARB ext found.645 glGetnCompressedTexImageARB ext found.646 glGetnTexImageARB ext found.647 glGetnUniformdvARB ext found.648 glGetnUniformfvARB ext found.649 glGetnUniformivARB ext found.650 glGetnUniformuivARB ext found.651 glReadnPixelsARB ext found.677 381 1920 1080 96 96 32 1 36 36 51 60 1 SIGMA GL/2 Hardware-accelerated Draw Processing Unit 000
	Intel(R) HD Graphics 4.0.0 - Build 10.18.10.5161sglDdev_w32.c:299
API ERROR HIGH 1280 GL error GL_INVALID_ENUMsglDdev_w32.c:775
GL: INVAL_PARAMsglDdev_w32.c:299
API ERROR HIGH 1280 GL error GL_INVALID_ENUMsglDdev_w32.c:777
GL: INVAL_PARAMsglDdev_w32.c:299
API ERROR HIGH 1280 GL error GL_INVALID_ENUMsglDdev_w32.c:875
GL: INVAL_PARAMsglDdev_w32.c:299
API ERROR HIGH 1280 GL error GL_INVALID_ENUMsglDdev_w32.c:904
GL: INVAL_PARAMsglDdev_w32.c:299
API ERROR HIGH 1280 GL error GL_INVALID_ENUMsglDdev_w32.c:977
GL: INVAL_PARAMsglDdev_w32.c:299
API ERROR HIGH 1280 GL error GL_INVALID_ENUMsglDdev_w32.c:980
GL: INVAL_PARAMsglDdev_w32.c:299
API ERROR HIGH 1280 GL error GL_INVALID_ENUMsglDdev_w32.c:985
GL: INVAL_PARAMsglDdev_w32.c:299
API ERROR HIGH 1280 GL error GL_INVALID_ENUMsglDdev_w32.c:990
GL: INVAL_PARAMEntering the Thread Execution Environment 6472
Uploading pipeline '//./z/video/sampleOutRgba.xsh.xml'Loading file... <//./z/video/sampleOutRgba.xsh.xml>('E:\qwadro\afx\system\video\sampleOutRgba.xsh.xml')Node 'DepthWriteEnabled' not handled.../system/video/sampleOutRgba.xsh.xmlUploading pipeline '../system/video/sampleOutRgba.xsh.xml'Loading file... <../system/video/sampleOutRgba.xsh.xml>('../system/video/sampleOutRgba.xsh.xml')../system/video/uvOutTristripQuad.vsh../system/video/sampleOutRgba2d.fshOpening file... <../system/video/uvOutTristripQuad.vsh>('../system/video/uvOutTristripQuad.vsh'),1Opening file... <../system/video/stdEnv.inc>('../system/video/stdEnv.inc'),1#version 330 core // QWADRO. Engineered by SIGMA Technology Group.

#define afxInt int
#define afxNat uint

#define afxReal float

#define afxV2d vec2
#define afxV3d vec3
#define afxV4d vec4

#define afxM2d mat2
#define afxM3d mat3
#define afxM4d mat4

#define float2 vec2
#define float3 vec3
#define float4 vec4

#define IN(_location_, _type_, _name_) layout(location = _location_) in _type_ _name_ 
#define OUT(_location_, _type_, _name_) layout(location = _location_) out _type_ _name_ 
//#define UNIFORM(_set_, _binding_, _type_, _name_) uniform _type_ _name_ 
//#define MULTIFORM(_set_, _binding_, _type_, _name_, _count_) _type_ _name_[_count_] 

// ubo = std140, ssbo = std430
#define UNIFORM_UNIT(_set_, _binding_, _name_) layout(std140) uniform _name_ 
#define STORAGE_UNIT(_set_, _binding_, _access_, _name_) layout(std430) _access_ buffer _name_ 
#define SAMPLING_UNIT(_set_, _binding_, _type_, _name_) uniform _type_ _name_ 
#define PUSHABLE(_name_) layout(std140) uniform _name_

const vec4 gsQuadPos[4] = vec4[](vec4(-1, 1, 0, 1), vec4(-1,-1, 0, 1), vec4(1, 1, 0, 1), vec4(1,-1, 0, 1));
const vec2 gsQuadUv[4] = vec2[](vec2(0, 1), vec2(0, 0), vec2(1, 1), vec2(1, 0));

out block
{
    vec2 uv0;
} sgl_v;

void main()
{
    // draw a full coverage quad based on two tristripped triangles (4 indices). AfxDraw(0, 1, 0, 4)
    
    gl_Position = gsQuadPos[gl_VertexID];
    sgl_v.uv0 = gsQuadUv[gl_VertexID];
}
Opening file... <../system/video/sampleOutRgba2d.fsh>('../system/video/sampleOutRgba2d.fsh'),1Opening file... <../system/video/stdEnv.inc>('../system/video/stdEnv.inc'),1#version 330 core // QWADRO. Engineered by SIGMA Technology Group.

#define afxInt int
#define afxNat uint

#define afxReal float

#define afxV2d vec2
#define afxV3d vec3
#define afxV4d vec4

#define afxM2d mat2
#define afxM3d mat3
#define afxM4d mat4

#define float2 vec2
#define float3 vec3
#define float4 vec4

#define IN(_location_, _type_, _name_) layout(location = _location_) in _type_ _name_ 
#define OUT(_location_, _type_, _name_) layout(location = _location_) out _type_ _name_ 
//#define UNIFORM(_set_, _binding_, _type_, _name_) uniform _type_ _name_ 
//#define MULTIFORM(_set_, _binding_, _type_, _name_, _count_) _type_ _name_[_count_] 

// ubo = std140, ssbo = std430
#define UNIFORM_UNIT(_set_, _binding_, _name_) layout(std140) uniform _name_ 
#define STORAGE_UNIT(_set_, _binding_, _access_, _name_) layout(std430) _access_ buffer _name_ 
#define SAMPLING_UNIT(_set_, _binding_, _type_, _name_) uniform _type_ _name_ 
#define PUSHABLE(_name_) layout(std140) uniform _name_

SAMPLING_UNIT(0, 0, sampler2D, samp);

in block
{
    vec2 uv0;
} sgl_v;

OUT(0, vec4, sgl_rgba);

void main()
{
    sgl_rgba = texture(samp, sgl_v.uv0);
}
afxDrawOutput 000 readapted. 1920x1080 @ 60.000000Hz <1.777778r, 1.776903p>afxDrawOutput 000 adjusted. <952, 1920, 0.496> 1.881423 <506, 1080, 0.469>Entering the Thread Execution Environment 8920
sglDdev_w32.c:122
Hardware-side buffer 04bed8b8 ready. 34962, 1, 4Hardware-side buffer 04bed958 ready. 34963, 2, 8Entering the Thread Execution Environment 6472
Uploading pipeline '../data/pipeline/test/test.xsh.xml'Loading file... <../data/pipeline/test/test.xsh.xml>('../data/pipeline/test/test.xsh.xml')../data/pipeline/test/test.xsh.xmlUploading pipeline '../data/pipeline/test/test.xsh.xml'Loading file... <../data/pipeline/test/test.xsh.xml>('../data/pipeline/test/test.xsh.xml')../data/pipeline/test/test.vsh../data/pipeline/test/test.fshOpening file... <../data/pipeline/test/test.vsh>('../data/pipeline/test/test.vsh'),1Opening file... <../data/pipeline/stdEnv.inc>('../data/pipeline/stdEnv.inc'),1Opening file... <../data/pipeline/stdView.inc>('../data/pipeline/stdView.inc'),1#version 330 core // QWADRO. Engineered by SIGMA Technology Group.

#define afxInt int
#define afxNat uint

#define afxReal float

#define afxV2d vec2
#define afxV3d vec3
#define afxV4d vec4

#define afxM2d mat2
#define afxM3d mat3
#define afxM4d mat4

#define float2 vec2
#define float3 vec3
#define float4 vec4

#define IN(_location_, _type_, _name_) layout(location = _location_) in _type_ _name_ 
#define OUT(_location_, _type_, _name_) layout(location = _location_) out _type_ _name_ 
//#define UNIFORM(_set_, _binding_, _type_, _name_) uniform _type_ _name_ 
//#define MULTIFORM(_set_, _binding_, _type_, _name_, _count_) _type_ _name_[_count_] 

// ubo = std140, ssbo = std430
#define UNIFORM_UNIT(_set_, _binding_, _name_) layout(std140) uniform _name_ 
#define STORAGE_UNIT(_set_, _binding_, _access_, _name_) layout(std430) _access_ buffer _name_ 
#define SAMPLING_UNIT(_set_, _binding_, _type_, _name_) uniform _type_ _name_ 

UNIFORM_UNIT(0, 0, sgl_view)
{
    mat4 v;
    mat4 iv;
    mat4 p;
    mat4 ip;
    mat4 vp;
    mat4 ivp;
    
    vec4 viewPos; // view point
    vec2 viewExtent;

    vec3 starDir;
    vec4 starPos;
    vec4 starKd;
};

IN(0, vec3, a_xyz);

void main()
{
    vec4 pos = p * v * vec4(a_xyz, 1.0);
    gl_Position = pos;
}
Opening file... <../data/pipeline/test/test.fsh>('../data/pipeline/test/test.fsh'),1Opening file... <../data/pipeline/stdEnv.inc>('../data/pipeline/stdEnv.inc'),1#version 330 core // QWADRO. Engineered by SIGMA Technology Group.

#define afxInt int
#define afxNat uint

#define afxReal float

#define afxV2d vec2
#define afxV3d vec3
#define afxV4d vec4

#define afxM2d mat2
#define afxM3d mat3
#define afxM4d mat4

#define float2 vec2
#define float3 vec3
#define float4 vec4

#define IN(_location_, _type_, _name_) layout(location = _location_) in _type_ _name_ 
#define OUT(_location_, _type_, _name_) layout(location = _location_) out _type_ _name_ 
//#define UNIFORM(_set_, _binding_, _type_, _name_) uniform _type_ _name_ 
//#define MULTIFORM(_set_, _binding_, _type_, _name_, _count_) _type_ _name_[_count_] 

// ubo = std140, ssbo = std430
#define UNIFORM_UNIT(_set_, _binding_, _name_) layout(std140) uniform _name_ 
#define STORAGE_UNIT(_set_, _binding_, _access_, _name_) layout(std430) _access_ buffer _name_ 
#define SAMPLING_UNIT(_set_, _binding_, _type_, _name_) uniform _type_ _name_ 

OUT(0, vec4, sgl_rgba);

void main()
{
    sgl_rgba = vec4(0.5, 0.5, 0.5, 1.0);
}
afxUri.c:1479
Reloading file 0... <../art/skybox/purple/right.tga>('../art/skybox/purple/right.tga')Entering the Thread Execution Environment 8920
Hardware-side raster 002ed5c8 ready. 8513, 8051, [2048,2048,6]Entering the Thread Execution Environment 6472
afxUri.c:1479
Reloading file 0... <../art/skybox/purple/left.tga>('../art/skybox/purple/left.tga')afxUri.c:1479
Reloading file 0... <../art/skybox/purple/bottom.tga>('../art/skybox/purple/bottom.tga')afxUri.c:1479
Reloading file 0... <../art/skybox/purple/top.tga>('../art/skybox/purple/top.tga')afxUri.c:1479
Reloading file 0... <../art/skybox/purple/front.tga>('../art/skybox/purple/front.tga')afxUri.c:1479
Reloading file 0... <../art/skybox/purple/back.tga>('../art/skybox/purple/back.tga')Entering the Thread Execution Environment 8920
Hardware-side buffer 04bef518 ready. 34962, 3, 4Entering the Thread Execution Environment 6472
Uploading pipeline '../data/pipeline/skybox/skybox.xsh.xml'Loading file... <../data/pipeline/skybox/skybox.xsh.xml>('../data/pipeline/skybox/skybox.xsh.xml')Node 'DepthWriteEnabled' not handled.../data/pipeline/skybox/skybox.xsh.xmlUploading pipeline '../data/pipeline/skybox/skybox.xsh.xml'Loading file... <../data/pipeline/skybox/skybox.xsh.xml>('../data/pipeline/skybox/skybox.xsh.xml')../data/pipeline/skybox/skybox.vsh../data/pipeline/skybox/sampleOutRgbaCube.fshOpening file... <../data/pipeline/skybox/skybox.vsh>('../data/pipeline/skybox/skybox.vsh'),1Opening file... <../data/pipeline/stdEnv.inc>('../data/pipeline/stdEnv.inc'),1Opening file... <../data/pipeline/stdView.inc>('../data/pipeline/stdView.inc'),1#version 330 core // QWADRO. Engineered by SIGMA Technology Group.

#define afxInt int
#define afxNat uint

#define afxReal float

#define afxV2d vec2
#define afxV3d vec3
#define afxV4d vec4

#define afxM2d mat2
#define afxM3d mat3
#define afxM4d mat4

#define float2 vec2
#define float3 vec3
#define float4 vec4

#define IN(_location_, _type_, _name_) layout(location = _location_) in _type_ _name_ 
#define OUT(_location_, _type_, _name_) layout(location = _location_) out _type_ _name_ 
//#define UNIFORM(_set_, _binding_, _type_, _name_) uniform _type_ _name_ 
//#define MULTIFORM(_set_, _binding_, _type_, _name_, _count_) _type_ _name_[_count_] 

// ubo = std140, ssbo = std430
#define UNIFORM_UNIT(_set_, _binding_, _name_) layout(std140) uniform _name_ 
#define STORAGE_UNIT(_set_, _binding_, _access_, _name_) layout(std430) _access_ buffer _name_ 
#define SAMPLING_UNIT(_set_, _binding_, _type_, _name_) uniform _type_ _name_ 

UNIFORM_UNIT(0, 0, sgl_view)
{
    mat4 v;
    mat4 iv;
    mat4 p;
    mat4 ip;
    mat4 vp;
    mat4 ivp;
    
    vec4 viewPos; // view point
    vec2 viewExtent;

    vec3 starDir;
    vec4 starPos;
    vec4 starKd;
};

IN(0, vec3, a_xyz);

const vec3 points[] =
{
    {-1.0, 1.0,-1.0 },
    {-1.0,-1.0,-1.0 },
    { 1.0,-1.0,-1.0 },
    { 1.0,-1.0,-1.0 },
    { 1.0, 1.0,-1.0 },
    {-1.0, 1.0,-1.0 },

    {-1.0,-1.0, 1.0 },
    {-1.0,-1.0,-1.0 },
    {-1.0, 1.0,-1.0 },
    {-1.0, 1.0,-1.0 },
    {-1.0, 1.0, 1.0 },
    {-1.0,-1.0, 1.0 },

    { 1.0,-1.0,-1.0 },
    { 1.0,-1.0, 1.0 },
    { 1.0, 1.0, 1.0 },
    { 1.0, 1.0, 1.0 },
    { 1.0, 1.0,-1.0 },
    { 1.0,-1.0,-1.0 },

    {-1.0,-1.0, 1.0 },
    {-1.0, 1.0, 1.0 },
    { 1.0, 1.0, 1.0 },
    { 1.0, 1.0, 1.0 },
    { 1.0,-1.0, 1.0 },
    {-1.0,-1.0, 1.0 },

    {-1.0, 1.0,-1.0 },
    { 1.0, 1.0,-1.0 },
    { 1.0, 1.0, 1.0 },
    { 1.0, 1.0, 1.0 },
    {-1.0, 1.0, 1.0 },
    {-1.0, 1.0,-1.0 },

    {-1.0,-1.0,-1.0 },
    {-1.0,-1.0, 1.0 },
    { 1.0,-1.0,-1.0 },
    { 1.0,-1.0,-1.0 },
    {-1.0,-1.0, 1.0 },
    { 1.0,-1.0, 1.0 }
};

out block
{
    vec3 uvw0;
} sgl_v;

void main()
{
    vec3 xyz = points[gl_VertexID];
    sgl_v.uvw0 = xyz;
    
    // Convert cubemap coordinates into Vulkan coordinate space
    sgl_v.uvw0.xy *= -1.0;
    
    // Remove translation from view matrix
    vec4 pos = p * mat4(mat3(v)) * vec4(xyz, 1.0);
    
    gl_Position = pos.xyww;
}
Opening file... <../data/pipeline/skybox/sampleOutRgbaCube.fsh>('../data/pipeline/skybox/sampleOutRgbaCube.fsh'),1Opening file... <../data/pipeline/stdEnv.inc>('../data/pipeline/stdEnv.inc'),1#version 330 core // QWADRO. Engineered by SIGMA Technology Group.

#define afxInt int
#define afxNat uint

#define afxReal float

#define afxV2d vec2
#define afxV3d vec3
#define afxV4d vec4

#define afxM2d mat2
#define afxM3d mat3
#define afxM4d mat4

#define float2 vec2
#define float3 vec3
#define float4 vec4

#define IN(_location_, _type_, _name_) layout(location = _location_) in _type_ _name_ 
#define OUT(_location_, _type_, _name_) layout(location = _location_) out _type_ _name_ 
//#define UNIFORM(_set_, _binding_, _type_, _name_) uniform _type_ _name_ 
//#define MULTIFORM(_set_, _binding_, _type_, _name_, _count_) _type_ _name_[_count_] 

// ubo = std140, ssbo = std430
#define UNIFORM_UNIT(_set_, _binding_, _name_) layout(std140) uniform _name_ 
#define STORAGE_UNIT(_set_, _binding_, _access_, _name_) layout(std430) _access_ buffer _name_ 
#define SAMPLING_UNIT(_set_, _binding_, _type_, _name_) uniform _type_ _name_ 

SAMPLING_UNIT(0, 1, samplerCube, samp);

in block
{
    vec3 uvw0;
} sgl_v;

OUT(0, vec4, sgl_rgba);

void main()
{
    sgl_rgba = texture(samp, sgl_v.uvw0);
}
Uploading pipeline '../data/pipeline/body/body.xsh.xml?rigid'Loading file... <../data/pipeline/body/body.xsh.xml>('../data/pipeline/body/body.xsh.xml')Node 'DepthWriteEnabled' not handled.Node 'Rasterizer' not handled.../data/pipeline/body/body.fshOpening file... <../data/pipeline/body/body.fsh>('../data/pipeline/body/body.fsh'),1Opening file... <../data/pipeline/stdEnv.inc>('../data/pipeline/stdEnv.inc'),1Opening file... <../data/pipeline/stdView.inc>('../data/pipeline/stdView.inc'),1Opening file... <../data/pipeline/stdMaterial.inc>('../data/pipeline/stdMaterial.inc'),1#version 330 core // QWADRO. Engineered by SIGMA Technology Group.

#define afxInt int
#define afxNat uint

#define afxReal float

#define afxV2d vec2
#define afxV3d vec3
#define afxV4d vec4

#define afxM2d mat2
#define afxM3d mat3
#define afxM4d mat4

#define float2 vec2
#define float3 vec3
#define float4 vec4

#define IN(_location_, _type_, _name_) layout(location = _location_) in _type_ _name_ 
#define OUT(_location_, _type_, _name_) layout(location = _location_) out _type_ _name_ 
//#define UNIFORM(_set_, _binding_, _type_, _name_) uniform _type_ _name_ 
//#define MULTIFORM(_set_, _binding_, _type_, _name_, _count_) _type_ _name_[_count_] 

// ubo = std140, ssbo = std430
#define UNIFORM_UNIT(_set_, _binding_, _name_) layout(std140) uniform _name_ 
#define STORAGE_UNIT(_set_, _binding_, _access_, _name_) layout(std430) _access_ buffer _name_ 
#define SAMPLING_UNIT(_set_, _binding_, _type_, _name_) uniform _type_ _name_ 

UNIFORM_UNIT(0, 0, sgl_view)
{
    mat4 v;
    mat4 iv;
    mat4 p;
    mat4 ip;
    mat4 vp;
    mat4 ivp;
    
    vec4 viewPos; // view point
    vec2 viewExtent;

    vec3 starDir;
    vec4 starPos;
    vec4 starKd;
};

UNIFORM_UNIT(2, 0, sgl_mtl)
{
    vec3  Kd;
    vec3  Ks;
    float Ns;
    float d;
    float Ni;
    int   illum;
};

UNIFORM(0, 0, sampler2D, diffuse_sampler);
        
in block
{
    vec3 xyz;
    vec3 nrm;
    vec2 uv0;
} sgl_v;

OUT(0, vec4, FragColor);

const vec3 lightPosition = vec3(10, 10, 10);
const vec3 lightAmbient = vec3(0.1, 0.1, 0.1);
const vec3 lightDiffuse = vec3(0.5, 0.5, 0.5);
const vec3 lightSpecular = vec3(0.5, 0.5, 0.5);

void main()
{
    // ambient
    vec3 ambient = lightAmbient;
    
    // diffuse 
    vec3 norm = normalize(sgl_v.nrm);
    vec3 lightDir = normalize(lightPosition - sgl_v.xyz);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = lightDiffuse * (diff * Kd);
    
    // specular
    vec3 viewDir = normalize(vec3(viewpoint.xyz) - sgl_v.xyz);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), Ns);
    vec3 specular = lightSpecular * (spec * Ks);  
        
    vec3 result = ambient + diffuse + specular;
    FragColor = vec4(result, 1.0);
}
Uploading pipeline '../data/pipeline/body/body.xsh.xml?skinned'Loading file... <../data/pipeline/body/body.xsh.xml>('../data/pipeline/body/body.xsh.xml')Node 'DepthWriteEnabled' not handled.Node 'Rasterizer' not handled.../data/pipeline/body/body.fshOpening file... <../data/pipeline/body/body.fsh>('../data/pipeline/body/body.fsh'),1Opening file... <../data/pipeline/stdEnv.inc>('../data/pipeline/stdEnv.inc'),1Opening file... <../data/pipeline/stdView.inc>('../data/pipeline/stdView.inc'),1Opening file... <../data/pipeline/stdMaterial.inc>('../data/pipeline/stdMaterial.inc'),1#version 330 core // QWADRO. Engineered by SIGMA Technology Group.

#define afxInt int
#define afxNat uint

#define afxReal float

#define afxV2d vec2
#define afxV3d vec3
#define afxV4d vec4

#define afxM2d mat2
#define afxM3d mat3
#define afxM4d mat4

#define float2 vec2
#define float3 vec3
#define float4 vec4

#define IN(_location_, _type_, _name_) layout(location = _location_) in _type_ _name_ 
#define OUT(_location_, _type_, _name_) layout(location = _location_) out _type_ _name_ 
//#define UNIFORM(_set_, _binding_, _type_, _name_) uniform _type_ _name_ 
//#define MULTIFORM(_set_, _binding_, _type_, _name_, _count_) _type_ _name_[_count_] 

// ubo = std140, ssbo = std430
#define UNIFORM_UNIT(_set_, _binding_, _name_) layout(std140) uniform _name_ 
#define STORAGE_UNIT(_set_, _binding_, _access_, _name_) layout(std430) _access_ buffer _name_ 
#define SAMPLING_UNIT(_set_, _binding_, _type_, _name_) uniform _type_ _name_ 

UNIFORM_UNIT(0, 0, sgl_view)
{
    mat4 v;
    mat4 iv;
    mat4 p;
    mat4 ip;
    mat4 vp;
    mat4 ivp;
    
    vec4 viewPos; // view point
    vec2 viewExtent;

    vec3 starDir;
    vec4 starPos;
    vec4 starKd;
};

UNIFORM_UNIT(2, 0, sgl_mtl)
{
    vec3  Kd;
    vec3  Ks;
    float Ns;
    float d;
    float Ni;
    int   illum;
};

UNIFORM(0, 0, sampler2D, diffuse_sampler);
        
in block
{
    vec3 xyz;
    vec3 nrm;
    vec2 uv0;
} sgl_v;

OUT(0, vec4, FragColor);

const vec3 lightPosition = vec3(10, 10, 10);
const vec3 lightAmbient = vec3(0.1, 0.1, 0.1);
const vec3 lightDiffuse = vec3(0.5, 0.5, 0.5);
const vec3 lightSpecular = vec3(0.5, 0.5, 0.5);

void main()
{
    // ambient
    vec3 ambient = lightAmbient;
    
    // diffuse 
    vec3 norm = normalize(sgl_v.nrm);
    vec3 lightDir = normalize(lightPosition - sgl_v.xyz);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = lightDiffuse * (diff * Kd);
    
    // specular
    vec3 viewDir = normalize(vec3(viewpoint.xyz) - sgl_v.xyz);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), Ns);
    vec3 specular = lightSpecular * (spec * Ks);  
        
    vec3 result = ambient + diffuse + specular;
    FragColor = vec4(result, 1.0);
}
Uploading pipeline '../data/pipeline/testLighting/testLighting.xsh.xml?blinn'Loading file... <../data/pipeline/testLighting/testLighting.xsh.xml>('../data/pipeline/testLighting/testLighting.xsh.xml')../data/pipeline/testLighting/testLighting.xsh.xmlUploading pipeline '../data/pipeline/testLighting/testLighting.xsh.xml'Loading file... <../data/pipeline/testLighting/testLighting.xsh.xml>('../data/pipeline/testLighting/testLighting.xsh.xml')../data/pipeline/testLighting/testLightingBlinn.vsh../data/pipeline/testLighting/testLightingBlinn.fshOpening file... <../data/pipeline/testLighting/testLightingBlinn.vsh>('../data/pipeline/testLighting/testLightingBlinn.vsh'),1Opening file... <../data/pipeline/stdEnv.inc>('../data/pipeline/stdEnv.inc'),1Opening file... <../data/pipeline/stdView.inc>('../data/pipeline/stdView.inc'),1Opening file... <../data/pipeline/stdObject.inc>('../data/pipeline/stdObject.inc'),1#version 330 core // QWADRO. Engineered by SIGMA Technology Group.

#define afxInt int
#define afxNat uint

#define afxReal float

#define afxV2d vec2
#define afxV3d vec3
#define afxV4d vec4

#define afxM2d mat2
#define afxM3d mat3
#define afxM4d mat4

#define float2 vec2
#define float3 vec3
#define float4 vec4

#define IN(_location_, _type_, _name_) layout(location = _location_) in _type_ _name_ 
#define OUT(_location_, _type_, _name_) layout(location = _location_) out _type_ _name_ 
//#define UNIFORM(_set_, _binding_, _type_, _name_) uniform _type_ _name_ 
//#define MULTIFORM(_set_, _binding_, _type_, _name_, _count_) _type_ _name_[_count_] 

// ubo = std140, ssbo = std430
#define UNIFORM_UNIT(_set_, _binding_, _name_) layout(std140) uniform _name_ 
#define STORAGE_UNIT(_set_, _binding_, _access_, _name_) layout(std430) _access_ buffer _name_ 
#define SAMPLING_UNIT(_set_, _binding_, _type_, _name_) uniform _type_ _name_ 

UNIFORM_UNIT(0, 0, sgl_view)
{
    mat4 v;
    mat4 iv;
    mat4 p;
    mat4 ip;
    mat4 vp;
    mat4 ivp;
    
    vec4 viewPos; // view point
    vec2 viewExtent;

    vec3 starDir;
    vec4 starPos;
    vec4 starKd;
};

UNIFORM_UNIT(3, 0, sgl_obj)
{
    mat4 m;
    mat4 w[32];
};

IN(0, vec3, in_pos);
IN(3, vec3, in_nrm);

out block
{
    vec4 posn;
    vec3 nrm;
} sgl_out;

void main()
{
    sgl_out.posn = v * m * vec4(in_pos, 1);
    mat3 n = mat3(transpose(inverse(m))); // gambiarra
    sgl_out.nrm = normalize(n * in_nrm);

    gl_Position = p * v * m * vec4(in_pos, 1);
}
Opening file... <../data/pipeline/testLighting/testLightingBlinn.fsh>('../data/pipeline/testLighting/testLightingBlinn.fsh'),1Opening file... <../data/pipeline/stdEnv.inc>('../data/pipeline/stdEnv.inc'),1Opening file... <../data/pipeline/stdView.inc>('../data/pipeline/stdView.inc'),1Opening file... <../data/pipeline/stdMaterial.inc>('../data/pipeline/stdMaterial.inc'),1#version 330 core // QWADRO. Engineered by SIGMA Technology Group.

#define afxInt int
#define afxNat uint

#define afxReal float

#define afxV2d vec2
#define afxV3d vec3
#define afxV4d vec4

#define afxM2d mat2
#define afxM3d mat3
#define afxM4d mat4

#define float2 vec2
#define float3 vec3
#define float4 vec4

#define IN(_location_, _type_, _name_) layout(location = _location_) in _type_ _name_ 
#define OUT(_location_, _type_, _name_) layout(location = _location_) out _type_ _name_ 
//#define UNIFORM(_set_, _binding_, _type_, _name_) uniform _type_ _name_ 
//#define MULTIFORM(_set_, _binding_, _type_, _name_, _count_) _type_ _name_[_count_] 

// ubo = std140, ssbo = std430
#define UNIFORM_UNIT(_set_, _binding_, _name_) layout(std140) uniform _name_ 
#define STORAGE_UNIT(_set_, _binding_, _access_, _name_) layout(std430) _access_ buffer _name_ 
#define SAMPLING_UNIT(_set_, _binding_, _type_, _name_) uniform _type_ _name_ 

UNIFORM_UNIT(0, 0, sgl_view)
{
    mat4 v;
    mat4 iv;
    mat4 p;
    mat4 ip;
    mat4 vp;
    mat4 ivp;
    
    vec4 viewPos; // view point
    vec2 viewExtent;

    vec3 starDir;
    vec4 starPos;
    vec4 starKd;
};

UNIFORM_UNIT(2, 0, sgl_mtl)
{
    vec3  Kd;
    vec3  Ks;
    float Ns;
    float d;
    float Ni;
    int   illum;
};

in block
{
    vec4 posn;
    vec3 nrm;
} sgl_in;

OUT(0, vec4, out_rgba0);

vec4 litSrc0Pos = vec4(100, 1000, 0, 1);
vec4 litProd0Ambi = vec4(0.1, 0.1, 0.1, 1);
vec4 litProd0Diff = vec4(0.9, 0.8, 0.7, 1);
vec4 litProd0Spec = vec4(0.1, 0.1, 0.1, 1);
vec4 litModelAmbi = vec4(1, 1, 1, 1);
vec4 mtlAmbi = vec4(0.1, 0.1, 0.1, 1);
float mltShinisses = 10;

void main (void)
{ 
    // calculate light diffusion
    vec3 light = normalize(litSrc0Pos.xyz - sgl_in.posn.xyz); 
    vec3 view = normalize(-sgl_in.posn.xyz); 
    vec3 normal = normalize(sgl_in.nrm); 

    // calculate ambience
    vec4 ambient = litProd0Ambi;
    vec4 global = mtlAmbi * litModelAmbi;

    // get vector to light
    vec4 diffuse = litProd0Diff * max(dot(sgl_in.nrm, light), 0.0);
    diffuse = clamp(diffuse, 0.0, 1.0);

    // Blinn specular variation
    vec3 halfDir = normalize(light + view);
    float spec = pow(max(dot(normal, halfDir), 0.0), mltShinisses * 0.2);
    vec4 specular = litProd0Spec * spec;
    specular = clamp(specular, 0.0, 1.0);

    // do calculations on every fragment
    out_rgba0 = global + ambient + diffuse + specular;
}
Uploading pipeline '../data/pipeline/tutCamUtil/tutCamUtil.xsh.xml?tutCamUtil'Loading file... <../data/pipeline/tutCamUtil/tutCamUtil.xsh.xml>('../data/pipeline/tutCamUtil/tutCamUtil.xsh.xml')Node 'DepthWriteEnabled' not handled.../data/pipeline/tutCamUtil/tutCamUtil.xsh.xmlUploading pipeline '../data/pipeline/tutCamUtil/tutCamUtil.xsh.xml'Loading file... <../data/pipeline/tutCamUtil/tutCamUtil.xsh.xml>('../data/pipeline/tutCamUtil/tutCamUtil.xsh.xml')../data/pipeline/tutCamUtil/tutCamUtilRigid.vsh../data/pipeline/tutCamUtil/tutCamUtil.fshOpening file... <../data/pipeline/tutCamUtil/tutCamUtilRigid.vsh>('../data/pipeline/tutCamUtil/tutCamUtilRigid.vsh'),1Opening file... <../data/pipeline/stdEnv.inc>('../data/pipeline/stdEnv.inc'),1Opening file... <../data/pipeline/stdView.inc>('../data/pipeline/stdView.inc'),1Opening file... <../data/pipeline/stdObject.inc>('../data/pipeline/stdObject.inc'),1#version 330 core // QWADRO. Engineered by SIGMA Technology Group.

#define afxInt int
#define afxNat uint

#define afxReal float

#define afxV2d vec2
#define afxV3d vec3
#define afxV4d vec4

#define afxM2d mat2
#define afxM3d mat3
#define afxM4d mat4

#define float2 vec2
#define float3 vec3
#define float4 vec4

#define IN(_location_, _type_, _name_) layout(location = _location_) in _type_ _name_ 
#define OUT(_location_, _type_, _name_) layout(location = _location_) out _type_ _name_ 
//#define UNIFORM(_set_, _binding_, _type_, _name_) uniform _type_ _name_ 
//#define MULTIFORM(_set_, _binding_, _type_, _name_, _count_) _type_ _name_[_count_] 

// ubo = std140, ssbo = std430
#define UNIFORM_UNIT(_set_, _binding_, _name_) layout(std140) uniform _name_ 
#define STORAGE_UNIT(_set_, _binding_, _access_, _name_) layout(std430) _access_ buffer _name_ 
#define SAMPLING_UNIT(_set_, _binding_, _type_, _name_) uniform _type_ _name_ 

UNIFORM_UNIT(0, 0, sgl_view)
{
    mat4 v;
    mat4 iv;
    mat4 p;
    mat4 ip;
    mat4 vp;
    mat4 ivp;
    
    vec4 viewPos; // view point
    vec2 viewExtent;

    vec3 starDir;
    vec4 starPos;
    vec4 starKd;
};

UNIFORM_UNIT(3, 0, sgl_obj)
{
    mat4 m;
    mat4 w[32];
};

IN(0, vec3, in_pos);
IN(3, vec3, in_nrm);
IN(6, vec2, in_uv0);

out block
{
    vec2 uv0;
    vec3 rgba0;
} sgl_out;

float3 DirFromLight = vec3(100, 100, 0);
float4 LightColour = vec4(0.9, 0.9, 0.9, 1);
float4 AmbientColour = vec4(0.1, 0.1, 0.1, 0.1);

void main()
{
    float4 WorldPos = m * vec4(in_pos, 1);
    float4 ViewPos  = v * WorldPos;
    float4 ClipPos  = p * ViewPos;

    float4 InNormal  = float4( in_nrm, 0);
    float3 ObjNormal = vec4(m * InNormal).xyz;

    sgl_out.uv0     = in_uv0;
    sgl_out.rgba0  = vec3(LightColour * dot(vec4(ObjNormal,0), vec4(DirFromLight,0)) + AmbientColour);

    gl_Position = ClipPos;
}
Opening file... <../data/pipeline/tutCamUtil/tutCamUtil.fsh>('../data/pipeline/tutCamUtil/tutCamUtil.fsh'),1Opening file... <../data/pipeline/stdEnv.inc>('../data/pipeline/stdEnv.inc'),1#version 330 core // QWADRO. Engineered by SIGMA Technology Group.

#define afxInt int
#define afxNat uint

#define afxReal float

#define afxV2d vec2
#define afxV3d vec3
#define afxV4d vec4

#define afxM2d mat2
#define afxM3d mat3
#define afxM4d mat4

#define float2 vec2
#define float3 vec3
#define float4 vec4

#define IN(_location_, _type_, _name_) layout(location = _location_) in _type_ _name_ 
#define OUT(_location_, _type_, _name_) layout(location = _location_) out _type_ _name_ 
//#define UNIFORM(_set_, _binding_, _type_, _name_) uniform _type_ _name_ 
//#define MULTIFORM(_set_, _binding_, _type_, _name_, _count_) _type_ _name_[_count_] 

// ubo = std140, ssbo = std430
#define UNIFORM_UNIT(_set_, _binding_, _name_) layout(std140) uniform _name_ 
#define STORAGE_UNIT(_set_, _binding_, _access_, _name_) layout(std430) _access_ buffer _name_ 
#define SAMPLING_UNIT(_set_, _binding_, _type_, _name_) uniform _type_ _name_ 

in block
{
    vec2 uv0;
    vec3 rgba0;
} sgl_in;

OUT(0, vec4, out_rgba0);

SAMPLING_UNIT(0, 1, sampler2D, diffuse_texture);

void main (void)
{ 
    float3 DiffuseSamp = vec3(1, 1, 1); //texture( diffuse_texture, sgl_in.uv0 );
    DiffuseSamp *= sgl_in.rgba0;

    out_rgba0 = float4(DiffuseSamp, 1);
}
afxString.c:490
afxString.c:490
(effectiveRange == len2)
    InvalidUploading pipeline '../data/pipeline/lighting/lighting.xsh.xml?lighting'Loading file... <../data/pipeline/lighting/lighting.xsh.xml>('../data/pipeline/lighting/lighting.xsh.xml')Node 'DepthWriteEnabled' not handled.../data/pipeline/lighting/lighting.xsh.xmlUploading pipeline '../data/pipeline/lighting/lighting.xsh.xml'Loading file... <../data/pipeline/lighting/lighting.xsh.xml>('../data/pipeline/lighting/lighting.xsh.xml')../data/pipeline/lighting/lighting.vshNode 'Input' not handled.Node 'Input' not handled.Node 'Input' not handled.../data/pipeline/lighting/lighting.fshOpening file... <../data/pipeline/lighting/lighting.vsh>('../data/pipeline/lighting/lighting.vsh'),1Opening file... <../data/pipeline/stdEnv.inc>('../data/pipeline/stdEnv.inc'),1Opening file... <../data/pipeline/stdView.inc>('../data/pipeline/stdView.inc'),1Opening file... <../data/pipeline/stdObject.inc>('../data/pipeline/stdObject.inc'),1#version 330 core // QWADRO. Engineered by SIGMA Technology Group.

#define afxInt int
#define afxNat uint

#define afxReal float

#define afxV2d vec2
#define afxV3d vec3
#define afxV4d vec4

#define afxM2d mat2
#define afxM3d mat3
#define afxM4d mat4

#define float2 vec2
#define float3 vec3
#define float4 vec4

#define IN(_location_, _type_, _name_) layout(location = _location_) in _type_ _name_ 
#define OUT(_location_, _type_, _name_) layout(location = _location_) out _type_ _name_ 
//#define UNIFORM(_set_, _binding_, _type_, _name_) uniform _type_ _name_ 
//#define MULTIFORM(_set_, _binding_, _type_, _name_, _count_) _type_ _name_[_count_] 

// ubo = std140, ssbo = std430
#define UNIFORM_UNIT(_set_, _binding_, _name_) layout(std140) uniform _name_ 
#define STORAGE_UNIT(_set_, _binding_, _access_, _name_) layout(std430) _access_ buffer _name_ 
#define SAMPLING_UNIT(_set_, _binding_, _type_, _name_) uniform _type_ _name_ 

UNIFORM_UNIT(0, 0, sgl_view)
{
    mat4 v;
    mat4 iv;
    mat4 p;
    mat4 ip;
    mat4 vp;
    mat4 ivp;
    
    vec4 viewPos; // view point
    vec2 viewExtent;

    vec3 starDir;
    vec4 starPos;
    vec4 starKd;
};

UNIFORM_UNIT(3, 0, sgl_obj)
{
    mat4 m;
    mat4 w[32];
};

IN(0, vec3, in_pos);
IN(3, vec3, in_nrm);
IN(6, vec2, in_uv0);

out block
{
    vec4 posn;
    vec3 nrm;
    vec2 uv0;
} sgl_out;

void main()
{
    sgl_out.posn = m * vec4(in_pos, 1);
    sgl_out.nrm = in_nrm;
    sgl_out.uv0 = in_uv0;
    gl_Position = p * v * m * vec4(in_pos, 1);
}
Opening file... <../data/pipeline/lighting/lighting.fsh>('../data/pipeline/lighting/lighting.fsh'),1Opening file... <../data/pipeline/stdEnv.inc>('../data/pipeline/stdEnv.inc'),1Opening file... <../data/pipeline/stdView.inc>('../data/pipeline/stdView.inc'),1Opening file... <../data/pipeline/stdMaterial.inc>('../data/pipeline/stdMaterial.inc'),1#version 330 core // QWADRO. Engineered by SIGMA Technology Group.

#define afxInt int
#define afxNat uint

#define afxReal float

#define afxV2d vec2
#define afxV3d vec3
#define afxV4d vec4

#define afxM2d mat2
#define afxM3d mat3
#define afxM4d mat4

#define float2 vec2
#define float3 vec3
#define float4 vec4

#define IN(_location_, _type_, _name_) layout(location = _location_) in _type_ _name_ 
#define OUT(_location_, _type_, _name_) layout(location = _location_) out _type_ _name_ 
//#define UNIFORM(_set_, _binding_, _type_, _name_) uniform _type_ _name_ 
//#define MULTIFORM(_set_, _binding_, _type_, _name_, _count_) _type_ _name_[_count_] 

// ubo = std140, ssbo = std430
#define UNIFORM_UNIT(_set_, _binding_, _name_) layout(std140) uniform _name_ 
#define STORAGE_UNIT(_set_, _binding_, _access_, _name_) layout(std430) _access_ buffer _name_ 
#define SAMPLING_UNIT(_set_, _binding_, _type_, _name_) uniform _type_ _name_ 

UNIFORM_UNIT(0, 0, sgl_view)
{
    mat4 v;
    mat4 iv;
    mat4 p;
    mat4 ip;
    mat4 vp;
    mat4 ivp;
    
    vec4 viewPos; // view point
    vec2 viewExtent;

    vec3 starDir;
    vec4 starPos;
    vec4 starKd;
};

UNIFORM_UNIT(2, 0, sgl_mtl)
{
    vec3  Kd;
    vec3  Ks;
    float Ns;
    float d;
    float Ni;
    int   illum;
};

SAMPLING_UNIT(2, 1, sampler2D, floorTexture);

vec3 lightPos = vec3(100, 100, 0);
int blinn = 1;

in block
{
    vec4 posn;
    vec3 nrm;
    vec2 uv0;
} sgl_in;

OUT(0, vec4, out_rgba0);

void main (void)
{ 
    vec3 color = vec3(0.5,0.5,0.5);//texture(floorTexture, sgl_in.uv0).rgb;
    
    // ambient
    vec3 ambient = 0.05 * color;
    
    // diffuse
    vec3 lightDir = normalize(lightPos - vec3(sgl_in.posn));
    vec3 normal = normalize(sgl_in.nrm);
    float diff = max(dot(lightDir, normal), 0.0);
    vec3 diffuse = diff * color;
    
    // specular
    vec3 viewDir = vec3(normalize(viewPos - sgl_in.posn));
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = 0.0;
    
    if(blinn == 1)
    {
        vec3 halfwayDir = normalize(lightDir + viewDir);  
        spec = pow(max(dot(normal, halfwayDir), 0.0), 32.0);
    }
    else
    {
        vec3 reflectDir = reflect(-lightDir, normal);
        spec = pow(max(dot(viewDir, reflectDir), 0.0), 8.0);
    }
    
    vec3 specular = vec3(0.3) * spec; // assuming bright white light color
    out_rgba0 = vec4(ambient + diffuse + specular, 1.0);
}
afxString.c:490
afxString.c:490
(effectiveRange == len2)
    Invalidglus_wavefront.c:859
MTL NAME //./art/scenario/gtabr/gtabr.mtlglus_wavefront.c:291
MTL FNAME //./art/scenario/gtabr/gtabr.mtlSkeleton <gtabr> assembled at 0e751528.
    Listing 1 joints..:      0 <> 4294967295Model <gtabr> assembled. 04c7ae98
    1 joints for 1 rigged meshes.
Mesh topology 0e7cde28 built. With 49046 triangles (4 bytes per index) arranged in 11 surfaces.Rigid Mesh <> assembled at 0e7515c8.
    147138 vertices with 3 attributes.
    49046 triangles (4 bytes per index) arranged in 11 surfaces.
    Listing 1 biases..:      0 <>   0Skeleton <bone_main> assembled at 0e751668.
    Listing 78 joints..:      0 <bone_main> 4294967295      1 <west mill age3_damaged>   0      2 <boneimpact01>   0      3 <boneimpact02>   0      4 <boneimpact04>   0      5 <boneimpact05>   0      6 <bone_debris_1a>   0      7 <debris_1a>   0      8 <bone_debris_1b>   0      9 <debris_1b>   0     10 <bone_debris_1c>   0     11 <debris_1c>   0     12 <bone_debris_1d>   0     13 <debris_1d>   0     14 <bone_debris_1e>   0     15 <debris_1e>   0     16 <bone_debris_1f>   0     17 <debris_1f>   0     18 <bone_debris_1g>   0     19 <debris_1g>   0     20 <bone_debris_1h>   0     21 <debris_1h>   0     22 <bone_debris_1i>   0     23 <debris_1i>   0     24 <bone_debris_1j>   0     25 <debris_1j>   0     26 <bone_debris_1k>   0     27 <debris_1k>   0     28 <bone_debris_2a>   0     29 <debris_2a>   0     30 <bone_debris_2b>   0     31 <debris_2b>   0     32 <bone_debris_2c>   0     33 <debris_2c>   0     34 <bone_debris_2d>   0     35 <debris_2d>   0     36 <bone_debris_2e>   0     37 <debris_2e>   0     38 <Bone_blades>   0     39 <bone_debris_3a>  38     40 <boneimpact03>  38     41 <mainblades>  38     42 <bone_debris_3f>  38     43 <bone_debris_3e>  38     44 <bone_debris_3d>  38     45 <bone_debris_3c>  38     46 <bone_debris_3b>  38     47 <debris_3a>   0     48 <debris_3b>   0     49 <debris_3c>   0     50 <debris_3d>   0     51 <debris_3e>   0     52 <debris_3f>   0     53 <bone_debris_4a>   0     54 <debris_4a>   0     55 <bone_debris_4b>   0     56 <debris_4b>   0     57 <bone_debris_4c>   0     58 <debris_4c>   0     59 <bone_debris_4d>   0     60 <debris_4d>   0     61 <bone_debris_4e>   0     62 <debris_4e>   0     63 <bone_debris_4g>   0     64 <debris_4g>   0     65 <bone_debris_4h>   0     66 <debris_4h>   0     67 <bone_debris_4i>   0     68 <debris_4i>   0     69 <bone_debris_4j>   0     70 <debris_4j>   0     71 <bone_debris_5a>   0     72 <debris_5a>   0     73 <bone_debris_5b>   0     74 <debris_5b>   0     75 <bone_debris_5c>   0     76 <debris_5c>   0     77 <BONE_FLAG_CIV>   0Model <bone_main> assembled. 04c7b1b0
    78 joints for 36 rigged meshes.
Mesh topology 0e7cdee0 built. With 1375 triangles (2 bytes per index) arranged in 8 surfaces.Rigid Mesh <west mill age3_damaged> assembled at 0e751708.
    3413 vertices with 3 attributes.
    1375 triangles (2 bytes per index) arranged in 8 surfaces.
    Listing 1 biases..:      0 <west mill age3_damaged>   0Mesh topology 0e7cdf98 built. With 24 triangles (1 bytes per index) arranged in 1 surfaces.Rigid Mesh <debris_1a> assembled at 0e7517a8.
    17 vertices with 3 attributes.
    24 triangles (1 bytes per index) arranged in 1 surfaces.
    Listing 1 biases..:      0 <bone_debris_1a>   0Mesh topology 0e7ce050 built. With 10 triangles (1 bytes per index) arranged in 1 surfaces.Rigid Mesh <debris_1b> assembled at 0e751848.
    20 vertices with 3 attributes.
    10 triangles (1 bytes per index) arranged in 1 surfaces.
    Listing 1 biases..:      0 <bone_debris_1b>   0Mesh topology 0e7ce108 built. With 16 triangles (1 bytes per index) arranged in 1 surfaces.Rigid Mesh <debris_1c> assembled at 0e7518e8.
    34 vertices with 3 attributes.
    16 triangles (1 bytes per index) arranged in 1 surfaces.
    Listing 1 biases..:      0 <bone_debris_1c>   0Mesh topology 0e7ce1c0 built. With 10 triangles (1 bytes per index) arranged in 1 surfaces.Rigid Mesh <debris_1d> assembled at 0e751988.
    20 vertices with 3 attributes.
    10 triangles (1 bytes per index) arranged in 1 surfaces.
    Listing 1 biases..:      0 <bone_debris_1d>   0Mesh topology 0e7ce278 built. With 10 triangles (1 bytes per index) arranged in 2 surfaces.Rigid Mesh <debris_1e> assembled at 0e751a28.
    39 vertices with 3 attributes.
    10 triangles (1 bytes per index) arranged in 2 surfaces.
    Listing 1 biases..:      0 <bone_debris_1e>   0Mesh topology 0e7ce330 built. With 18 triangles (1 bytes per index) arranged in 2 surfaces.Rigid Mesh <debris_1f> assembled at 0e751ac8.
    67 vertices with 3 attributes.
    18 triangles (1 bytes per index) arranged in 2 surfaces.
    Listing 1 biases..:      0 <bone_debris_1f>   0Mesh topology 0e7ce3e8 built. With 30 triangles (1 bytes per index) arranged in 2 surfaces.Rigid Mesh <debris_1g> assembled at 0e751b68.
    117 vertices with 3 attributes.
    30 triangles (1 bytes per index) arranged in 2 surfaces.
    Listing 1 biases..:      0 <bone_debris_1g>   0Mesh topology 0e7ce4a0 built. With 34 triangles (1 bytes per index) arranged in 2 surfaces.Rigid Mesh <debris_1h> assembled at 0e751c08.
    103 vertices with 3 attributes.
    34 triangles (1 bytes per index) arranged in 2 surfaces.
    Listing 1 biases..:      0 <bone_debris_1h>   0Mesh topology 0e7ce558 built. With 16 triangles (1 bytes per index) arranged in 2 surfaces.Rigid Mesh <debris_1i> assembled at 0e751ca8.
    67 vertices with 3 attributes.
    16 triangles (1 bytes per index) arranged in 2 surfaces.
    Listing 1 biases..:      0 <bone_debris_1i>   0Mesh topology 0e7ce610 built. With 26 triangles (1 bytes per index) arranged in 2 surfaces.Rigid Mesh <debris_1j> assembled at 0e751d48.
    104 vertices with 3 attributes.
    26 triangles (1 bytes per index) arranged in 2 surfaces.
    Listing 1 biases..:      0 <bone_debris_1j>   0Mesh topology 0e7ce6c8 built. With 34 triangles (1 bytes per index) arranged in 2 surfaces.Rigid Mesh <debris_1k> assembled at 0e751de8.
    139 vertices with 3 attributes.
    34 triangles (1 bytes per index) arranged in 2 surfaces.
    Listing 1 biases..:      0 <bone_debris_1k>   0Mesh topology 0e7ce780 built. With 36 triangles (1 bytes per index) arranged in 2 surfaces.Rigid Mesh <debris_2a> assembled at 0e751e88.
    105 vertices with 3 attributes.
    36 triangles (1 bytes per index) arranged in 2 surfaces.
    Listing 1 biases..:      0 <bone_debris_2a>   0Mesh topology 0e7ce838 built. With 20 triangles (1 bytes per index) arranged in 2 surfaces.Rigid Mesh <debris_2b> assembled at 0e751f28.
    36 vertices with 3 attributes.
    20 triangles (1 bytes per index) arranged in 2 surfaces.
    Listing 1 biases..:      0 <bone_debris_2b>   0Mesh topology 0e7ce8f0 built. With 14 triangles (1 bytes per index) arranged in 2 surfaces.Rigid Mesh <debris_2c> assembled at 0e751fc8.
    39 vertices with 3 attributes.
    14 triangles (1 bytes per index) arranged in 2 surfaces.
    Listing 1 biases..:      0 <bone_debris_2c>   0Mesh topology 0e7ce9a8 built. With 24 triangles (1 bytes per index) arranged in 2 surfaces.Rigid Mesh <debris_2d> assembled at 0e752068.
    51 vertices with 3 attributes.
    24 triangles (1 bytes per index) arranged in 2 surfaces.
    Listing 1 biases..:      0 <bone_debris_2d>   0Mesh topology 0e7cea60 built. With 18 triangles (1 bytes per index) arranged in 2 surfaces.Rigid Mesh <debris_2e> assembled at 0e752108.
    47 vertices with 3 attributes.
    18 triangles (1 bytes per index) arranged in 2 surfaces.
    Listing 1 biases..:      0 <bone_debris_2e>   0Mesh topology 0e7ceb18 built. With 20 triangles (1 bytes per index) arranged in 3 surfaces.Rigid Mesh <debris_3a> assembled at 0e7521a8.
    90 vertices with 3 attributes.
    20 triangles (1 bytes per index) arranged in 3 surfaces.
    Listing 1 biases..:      0 <bone_debris_3a>   0Mesh topology 0e7cebd0 built. With 50 triangles (1 bytes per index) arranged in 3 surfaces.Rigid Mesh <debris_3b> assembled at 0e752248.
    196 vertices with 3 attributes.
    50 triangles (1 bytes per index) arranged in 3 surfaces.
    Listing 1 biases..:      0 <bone_debris_3b>   0Mesh topology 0e7cec88 built. With 21 triangles (1 bytes per index) arranged in 3 surfaces.Rigid Mesh <debris_3c> assembled at 0e7522e8.
    84 vertices with 3 attributes.
    21 triangles (1 bytes per index) arranged in 3 surfaces.
    Listing 1 biases..:      0 <bone_debris_3c>   0Mesh topology 0e7ced40 built. With 20 triangles (1 bytes per index) arranged in 3 surfaces.Rigid Mesh <debris_3d> assembled at 0e752388.
    91 vertices with 3 attributes.
    20 triangles (1 bytes per index) arranged in 3 surfaces.
    Listing 1 biases..:      0 <bone_debris_3d>   0Mesh topology 0e7cedf8 built. With 35 triangles (1 bytes per index) arranged in 3 surfaces.Rigid Mesh <debris_3e> assembled at 0e752428.
    131 vertices with 3 attributes.
    35 triangles (1 bytes per index) arranged in 3 surfaces.
    Listing 1 biases..:      0 <bone_debris_3e>   0Mesh topology 0e7ceeb0 built. With 60 triangles (1 bytes per index) arranged in 3 surfaces.Rigid Mesh <debris_3f> assembled at 0e7524c8.
    195 vertices with 3 attributes.
    60 triangles (1 bytes per index) arranged in 3 surfaces.
    Listing 1 biases..:      0 <bone_debris_3f>   0Mesh topology 0e7cef68 built. With 12 triangles (1 bytes per index) arranged in 2 surfaces.Rigid Mesh <debris_4a> assembled at 0e752568.
    39 vertices with 3 attributes.
    12 triangles (1 bytes per index) arranged in 2 surfaces.
    Listing 1 biases..:      0 <bone_debris_4a>   0Mesh topology 0e7cf020 built. With 32 triangles (1 bytes per index) arranged in 2 surfaces.Rigid Mesh <debris_4b> assembled at 0e752608.
    92 vertices with 3 attributes.
    32 triangles (1 bytes per index) arranged in 2 surfaces.
    Listing 1 biases..:      0 <bone_debris_4b>   0Mesh topology 0e7cf0d8 built. With 30 triangles (1 bytes per index) arranged in 2 surfaces.Rigid Mesh <debris_4c> assembled at 0e7526a8.
    75 vertices with 3 attributes.
    30 triangles (1 bytes per index) arranged in 2 surfaces.
    Listing 1 biases..:      0 <bone_debris_4c>   0Mesh topology 0e7cf190 built. With 54 triangles (1 bytes per index) arranged in 2 surfaces.Rigid Mesh <debris_4d> assembled at 0e752748.
    167 vertices with 3 attributes.
    54 triangles (1 bytes per index) arranged in 2 surfaces.
    Listing 1 biases..:      0 <bone_debris_4d>   0Mesh topology 0e7cf248 built. With 50 triangles (1 bytes per index) arranged in 2 surfaces.Rigid Mesh <debris_4e> assembled at 0e7527e8.
    123 vertices with 3 attributes.
    50 triangles (1 bytes per index) arranged in 2 surfaces.
    Listing 1 biases..:      0 <bone_debris_4e>   0Mesh topology 0e7cf300 built. With 14 triangles (1 bytes per index) arranged in 2 surfaces.Rigid Mesh <debris_4g> assembled at 0e752888.
    33 vertices with 3 attributes.
    14 triangles (1 bytes per index) arranged in 2 surfaces.
    Listing 1 biases..:      0 <bone_debris_4g>   0Mesh topology 0e7cf3b8 built. With 24 triangles (1 bytes per index) arranged in 2 surfaces.Rigid Mesh <debris_4h> assembled at 0e752928.
    46 vertices with 3 attributes.
    24 triangles (1 bytes per index) arranged in 2 surfaces.
    Listing 1 biases..:      0 <bone_debris_4h>   0Mesh topology 0e7cf470 built. With 24 triangles (1 bytes per index) arranged in 2 surfaces.Rigid Mesh <debris_4i> assembled at 0e7529c8.
    48 vertices with 3 attributes.
    24 triangles (1 bytes per index) arranged in 2 surfaces.
    Listing 1 biases..:      0 <bone_debris_4i>   0Mesh topology 0e7cf528 built. With 16 triangles (1 bytes per index) arranged in 2 surfaces.Rigid Mesh <debris_4j> assembled at 0e752a68.
    39 vertices with 3 attributes.
    16 triangles (1 bytes per index) arranged in 2 surfaces.
    Listing 1 biases..:      0 <bone_debris_4j>   0Mesh topology 0e7cf5e0 built. With 34 triangles (1 bytes per index) arranged in 2 surfaces.Rigid Mesh <debris_5a> assembled at 0e752b08.
    109 vertices with 3 attributes.
    34 triangles (1 bytes per index) arranged in 2 surfaces.
    Listing 1 biases..:      0 <bone_debris_5a>   0Mesh topology 0e7cf698 built. With 24 triangles (1 bytes per index) arranged in 2 surfaces.Rigid Mesh <debris_5b> assembled at 0e752ba8.
    58 vertices with 3 attributes.
    24 triangles (1 bytes per index) arranged in 2 surfaces.
    Listing 1 biases..:      0 <bone_debris_5b>   0Mesh topology 0e7cf750 built. With 18 triangles (1 bytes per index) arranged in 2 surfaces.Rigid Mesh <debris_5c> assembled at 0e752c48.
    41 vertices with 3 attributes.
    18 triangles (1 bytes per index) arranged in 2 surfaces.
    Listing 1 biases..:      0 <bone_debris_5c>   0Mesh topology 0e7cf808 built. With 119 triangles (2 bytes per index) arranged in 3 surfaces.Rigid Mesh <mainblades> assembled at 0e752ce8.
    415 vertices with 3 attributes.
    119 triangles (2 bytes per index) arranged in 3 surfaces.
    Listing 1 biases..:      0 <mainblades>   0Motion <bone_main> assembled. 0e795760
    Listing 42 transform circuits:	0 <BONE_FLAG_CIV> cdcdcdcd	1 <Bone_blades> cdcdcdcd	2 <bone_debris_1a> cdcdcdcd	3 <bone_debris_1b> cdcdcdcd	4 <bone_debris_1c> cdcdcdcd	5 <bone_debris_1d> cdcdcdcd	6 <bone_debris_1e> cdcdcdcd	7 <bone_debris_1f> cdcdcdcd	8 <bone_debris_1g> cdcdcdcd	9 <bone_debris_1h> cdcdcdcd	10 <bone_debris_1i> cdcdcdcd	11 <bone_debris_1j> cdcdcdcd	12 <bone_debris_1k> cdcdcdcd	13 <bone_debris_2a> cdcdcdcd	14 <bone_debris_2b> cdcdcdcd	15 <bone_debris_2c> cdcdcdcd	16 <bone_debris_2d> cdcdcdcd	17 <bone_debris_2e> cdcdcdcd	18 <bone_debris_3a> cdcdcdcd	19 <bone_debris_3b> cdcdcdcd	20 <bone_debris_3c> cdcdcdcd	21 <bone_debris_3d> cdcdcdcd	22 <bone_debris_3e> cdcdcdcd	23 <bone_debris_3f> cdcdcdcd	24 <bone_debris_4a> cdcdcdcd	25 <bone_debris_4b> cdcdcdcd	26 <bone_debris_4c> cdcdcdcd	27 <bone_debris_4d> cdcdcdcd	28 <bone_debris_4e> cdcdcdcd	29 <bone_debris_4g> cdcdcdcd	30 <bone_debris_4h> cdcdcdcd	31 <bone_debris_4i> cdcdcdcd	32 <bone_debris_4j> cdcdcdcd	33 <bone_debris_5a> cdcdcdcd	34 <bone_debris_5b> cdcdcdcd	35 <bone_debris_5c> cdcdcdcd	36 <bone_main> cdcdcdcd	37 <boneimpact01> cdcdcdcd	38 <boneimpact02> cdcdcdcd	39 <boneimpact03> cdcdcdcd	40 <boneimpact04> cdcdcdcd	41 <boneimpact05> cdcdcdcdMesh topology 0e7cf978 built. With 12 triangles (4 bytes per index) arranged in 1 surfaces.Rigid Mesh <> assembled at 0e752d88.
    24 vertices with 3 attributes.
    12 triangles (1 bytes per index) arranged in 1 surfaces.
    Listing 1 biases..:      0 <>   0akxModel.c:218
Pivot '' not found in the destination skeleton.Model <cube> assembled. 04c7b3c0
    78 joints for 1 rigged meshes.
Installing watcher <0e6c1288> for 04be1fd0...Entering the Thread Execution Environment 8920
Hardware-side raster 04d6f110 ready. de1, 8229, [512,512,1]Hardware-side buffer 0e752e28 ready. 34962, 4, 4Hardware-side buffer 0e752ec8 ready. 34963, 5, 8Hardware-side buffer 0e752f68 ready. 34962, 6, 4Hardware-side buffer 0e753008 ready. 34963, 7, 8Hardware-side buffer 0e7530a8 ready. 34962, 8, 4Hardware-side buffer 0e753148 ready. 34963, 9, 8Hardware-side buffer 0e7531e8 ready. 34962, 10, 4Hardware-side buffer 0e753288 ready. 34963, 11, 8Hardware-side buffer 0e6dad38 ready. 34962, 12, 4Hardware-side buffer 0e6dadd8 ready. 34963, 13, 8Hardware-side buffer 0e6dae78 ready. 34962, 14, 4Hardware-side buffer 0e6daf18 ready. 34963, 15, 8Hardware-side buffer 0e6dafb8 ready. 34962, 16, 4Hardware-side buffer 0e6db058 ready. 34963, 17, 8Hardware-side buffer 0e6db0f8 ready. 34962, 18, 4Hardware-side buffer 0e6db198 ready. 34963, 19, 8Hardware-side buffer 0e6db238 ready. 34962, 20, 4Hardware-side buffer 0e6db2d8 ready. 34963, 21, 8Hardware-side buffer 0e6db378 ready. 34962, 22, 4Hardware-side buffer 0e6db418 ready. 34963, 23, 8Hardware-side buffer 0e6db4b8 ready. 34962, 24, 4Hardware-side buffer 0e6db558 ready. 34963, 25, 8Hardware-side buffer 0e6db5f8 ready. 34962, 26, 4Hardware-side buffer 0e6db698 ready. 34963, 27, 8Hardware-side buffer 0e6db738 ready. 34962, 28, 4Hardware-side buffer 0e6db7d8 ready. 34963, 29, 8Hardware-side buffer 0e6db878 ready. 34962, 30, 4Hardware-side buffer 0e6db918 ready. 34963, 31, 8Hardware-side buffer 0e6db9b8 ready. 34962, 32, 4Hardware-side buffer 0e6dba58 ready. 34963, 33, 8Hardware-side buffer 0e6dbaf8 ready. 34962, 34, 4Hardware-side buffer 0e6dbb98 ready. 34963, 35, 8Hardware-side buffer 0e6dbc38 ready. 34962, 36, 4Hardware-side buffer 0e6c30e8 ready. 34963, 37, 8Hardware-side buffer 0e6c3188 ready. 34962, 38, 4Hardware-side buffer 0e6c3228 ready. 34963, 39, 8Hardware-side buffer 0e6c32c8 ready. 34962, 40, 4Hardware-side buffer 0e6c3368 ready. 34963, 41, 8Hardware-side buffer 0e6c3408 ready. 34962, 42, 4Hardware-side buffer 0e6c34a8 ready. 34963, 43, 8Hardware-side buffer 0e6c3548 ready. 34962, 44, 4Hardware-side buffer 0e6c35e8 ready. 34963, 45, 8Hardware-side buffer 0e6c3688 ready. 34962, 46, 4Hardware-side buffer 0e6c3728 ready. 34963, 47, 8Hardware-side buffer 0e6c37c8 ready. 34962, 48, 4Hardware-side buffer 0e6c3868 ready. 34963, 49, 8Hardware-side buffer 0e6c3908 ready. 34962, 50, 4Hardware-side buffer 0e6c39a8 ready. 34963, 51, 8Hardware-side buffer 0e6c3a48 ready. 34962, 52, 4Hardware-side buffer 0e6c3ae8 ready. 34963, 53, 8Hardware-side buffer 0e6c3b88 ready. 34962, 54, 4Hardware-side buffer 0e6c3c28 ready. 34963, 55, 8Hardware-side buffer 0e6c3cc8 ready. 34962, 56, 4Hardware-side buffer 0e6c3d68 ready. 34963, 57, 8Hardware-side buffer 0e6c3e08 ready. 34962, 58, 4Hardware-side buffer 0e6c3ea8 ready. 34963, 59, 8Hardware-side buffer 0e6c3f48 ready. 34962, 60, 4Hardware-side buffer 0e6c3fe8 ready. 34963, 61, 8Hardware-side buffer 0e7c8f68 ready. 34962, 62, 4Hardware-side buffer 0e7c9008 ready. 34963, 63, 8Hardware-side buffer 0e7c90a8 ready. 34962, 64, 4Hardware-side buffer 0e7c9148 ready. 34963, 65, 8Hardware-side buffer 0e7c91e8 ready. 34962, 66, 4Hardware-side buffer 0e7c9288 ready. 34963, 67, 8Hardware-side buffer 0e7c9328 ready. 34962, 68, 4Hardware-side buffer 0e7c93c8 ready. 34963, 69, 8Hardware-side buffer 0e7c9468 ready. 34962, 70, 4Hardware-side buffer 0e7c9508 ready. 34963, 71, 8Hardware-side buffer 0e7c95a8 ready. 34962, 72, 4Hardware-side buffer 0e7c9648 ready. 34963, 73, 8Hardware-side buffer 0e7c96e8 ready. 34962, 74, 4Hardware-side buffer 0e7c9788 ready. 34963, 75, 8Hardware-side raster 002ed268 ready. de1, 8058, [952,506,1]Hardware-side raster 002ed340 ready. de1, 8cac, [952,506,1]avxCanvas 04be9430 hardware-side data instanced.Hardware-side buffer 04c04da0 ready. 35345, 76, 10Hardware-side buffer 0e751348 ready. 35345, 77, 10Opening file... <../data/pipeline/testLighting/testLightingBlinn.vsh>('../data/pipeline/testLighting/testLightingBlinn.vsh'),1Opening file... <../data/pipeline/stdEnv.inc>('../data/pipeline/stdEnv.inc'),1Opening file... <../data/pipeline/stdView.inc>('../data/pipeline/stdView.inc'),1Opening file... <../data/pipeline/stdObject.inc>('../data/pipeline/stdObject.inc'),1#version 330 core // QWADRO. Engineered by SIGMA Technology Group.

#define afxInt int
#define afxNat uint

#define afxReal float

#define afxV2d vec2
#define afxV3d vec3
#define afxV4d vec4

#define afxM2d mat2
#define afxM3d mat3
#define afxM4d mat4

#define float2 vec2
#define float3 vec3
#define float4 vec4

#define IN(_location_, _type_, _name_) layout(location = _location_) in _type_ _name_ 
#define OUT(_location_, _type_, _name_) layout(location = _location_) out _type_ _name_ 
//#define UNIFORM(_set_, _binding_, _type_, _name_) uniform _type_ _name_ 
//#define MULTIFORM(_set_, _binding_, _type_, _name_, _count_) _type_ _name_[_count_] 

// ubo = std140, ssbo = std430
#define UNIFORM_UNIT(_set_, _binding_, _name_) layout(std140) uniform _name_ 
#define STORAGE_UNIT(_set_, _binding_, _access_, _name_) layout(std430) _access_ buffer _name_ 
#define SAMPLING_UNIT(_set_, _binding_, _type_, _name_) uniform _type_ _name_ 

UNIFORM_UNIT(0, 0, sgl_view)
{
    mat4 v;
    mat4 iv;
    mat4 p;
    mat4 ip;
    mat4 vp;
    mat4 ivp;
    
    vec4 viewPos; // view point
    vec2 viewExtent;

    vec3 starDir;
    vec4 starPos;
    vec4 starKd;
};

UNIFORM_UNIT(3, 0, sgl_obj)
{
    mat4 m;
    mat4 w[32];
};

IN(0, vec3, in_pos);
IN(3, vec3, in_nrm);

out block
{
    vec4 posn;
    vec3 nrm;
} sgl_out;

void main()
{
    sgl_out.posn = v * m * vec4(in_pos, 1);
    mat3 n = mat3(transpose(inverse(m))); // gambiarra
    sgl_out.nrm = normalize(n * in_nrm);

    gl_Position = p * v * m * vec4(in_pos, 1);
}
Opening file... <../data/pipeline/testLighting/testLightingBlinn.fsh>('../data/pipeline/testLighting/testLightingBlinn.fsh'),1Opening file... <../data/pipeline/stdEnv.inc>('../data/pipeline/stdEnv.inc'),1Opening file... <../data/pipeline/stdView.inc>('../data/pipeline/stdView.inc'),1Opening file... <../data/pipeline/stdMaterial.inc>('../data/pipeline/stdMaterial.inc'),1#version 330 core // QWADRO. Engineered by SIGMA Technology Group.

#define afxInt int
#define afxNat uint

#define afxReal float

#define afxV2d vec2
#define afxV3d vec3
#define afxV4d vec4

#define afxM2d mat2
#define afxM3d mat3
#define afxM4d mat4

#define float2 vec2
#define float3 vec3
#define float4 vec4

#define IN(_location_, _type_, _name_) layout(location = _location_) in _type_ _name_ 
#define OUT(_location_, _type_, _name_) layout(location = _location_) out _type_ _name_ 
//#define UNIFORM(_set_, _binding_, _type_, _name_) uniform _type_ _name_ 
//#define MULTIFORM(_set_, _binding_, _type_, _name_, _count_) _type_ _name_[_count_] 

// ubo = std140, ssbo = std430
#define UNIFORM_UNIT(_set_, _binding_, _name_) layout(std140) uniform _name_ 
#define STORAGE_UNIT(_set_, _binding_, _access_, _name_) layout(std430) _access_ buffer _name_ 
#define SAMPLING_UNIT(_set_, _binding_, _type_, _name_) uniform _type_ _name_ 

UNIFORM_UNIT(0, 0, sgl_view)
{
    mat4 v;
    mat4 iv;
    mat4 p;
    mat4 ip;
    mat4 vp;
    mat4 ivp;
    
    vec4 viewPos; // view point
    vec2 viewExtent;

    vec3 starDir;
    vec4 starPos;
    vec4 starKd;
};

UNIFORM_UNIT(2, 0, sgl_mtl)
{
    vec3  Kd;
    vec3  Ks;
    float Ns;
    float d;
    float Ni;
    int   illum;
};

in block
{
    vec4 posn;
    vec3 nrm;
} sgl_in;

OUT(0, vec4, out_rgba0);

vec4 litSrc0Pos = vec4(100, 1000, 0, 1);
vec4 litProd0Ambi = vec4(0.1, 0.1, 0.1, 1);
vec4 litProd0Diff = vec4(0.9, 0.8, 0.7, 1);
vec4 litProd0Spec = vec4(0.1, 0.1, 0.1, 1);
vec4 litModelAmbi = vec4(1, 1, 1, 1);
vec4 mtlAmbi = vec4(0.1, 0.1, 0.1, 1);
float mltShinisses = 10;

void main (void)
{ 
    // calculate light diffusion
    vec3 light = normalize(litSrc0Pos.xyz - sgl_in.posn.xyz); 
    vec3 view = normalize(-sgl_in.posn.xyz); 
    vec3 normal = normalize(sgl_in.nrm); 

    // calculate ambience
    vec4 ambient = litProd0Ambi;
    vec4 global = mtlAmbi * litModelAmbi;

    // get vector to light
    vec4 diffuse = litProd0Diff * max(dot(sgl_in.nrm, light), 0.0);
    diffuse = clamp(diffuse, 0.0, 1.0);

    // Blinn specular variation
    vec3 halfDir = normalize(light + view);
    float spec = pow(max(dot(normal, halfDir), 0.0), mltShinisses * 0.2);
    vec4 specular = litProd0Spec * spec;
    specular = clamp(specular, 0.0, 1.0);

    // do calculations on every fragment
    out_rgba0 = global + ambient + diffuse + specular;
}
sglLiga.c:202
avxPipeline 0e7696b8 hardware-side data instanced.Opening file... <../data/pipeline/test/test.vsh>('../data/pipeline/test/test.vsh'),1Opening file... <../data/pipeline/stdEnv.inc>('../data/pipeline/stdEnv.inc'),1Opening file... <../data/pipeline/stdView.inc>('../data/pipeline/stdView.inc'),1#version 330 core // QWADRO. Engineered by SIGMA Technology Group.

#define afxInt int
#define afxNat uint

#define afxReal float

#define afxV2d vec2
#define afxV3d vec3
#define afxV4d vec4

#define afxM2d mat2
#define afxM3d mat3
#define afxM4d mat4

#define float2 vec2
#define float3 vec3
#define float4 vec4

#define IN(_location_, _type_, _name_) layout(location = _location_) in _type_ _name_ 
#define OUT(_location_, _type_, _name_) layout(location = _location_) out _type_ _name_ 
//#define UNIFORM(_set_, _binding_, _type_, _name_) uniform _type_ _name_ 
//#define MULTIFORM(_set_, _binding_, _type_, _name_, _count_) _type_ _name_[_count_] 

// ubo = std140, ssbo = std430
#define UNIFORM_UNIT(_set_, _binding_, _name_) layout(std140) uniform _name_ 
#define STORAGE_UNIT(_set_, _binding_, _access_, _name_) layout(std430) _access_ buffer _name_ 
#define SAMPLING_UNIT(_set_, _binding_, _type_, _name_) uniform _type_ _name_ 

UNIFORM_UNIT(0, 0, sgl_view)
{
    mat4 v;
    mat4 iv;
    mat4 p;
    mat4 ip;
    mat4 vp;
    mat4 ivp;
    
    vec4 viewPos; // view point
    vec2 viewExtent;

    vec3 starDir;
    vec4 starPos;
    vec4 starKd;
};

IN(0, vec3, a_xyz);

void main()
{
    vec4 pos = p * v * vec4(a_xyz, 1.0);
    gl_Position = pos;
}
Opening file... <../data/pipeline/test/test.fsh>('../data/pipeline/test/test.fsh'),1Opening file... <../data/pipeline/stdEnv.inc>('../data/pipeline/stdEnv.inc'),1#version 330 core // QWADRO. Engineered by SIGMA Technology Group.

#define afxInt int
#define afxNat uint

#define afxReal float

#define afxV2d vec2
#define afxV3d vec3
#define afxV4d vec4

#define afxM2d mat2
#define afxM3d mat3
#define afxM4d mat4

#define float2 vec2
#define float3 vec3
#define float4 vec4

#define IN(_location_, _type_, _name_) layout(location = _location_) in _type_ _name_ 
#define OUT(_location_, _type_, _name_) layout(location = _location_) out _type_ _name_ 
//#define UNIFORM(_set_, _binding_, _type_, _name_) uniform _type_ _name_ 
//#define MULTIFORM(_set_, _binding_, _type_, _name_, _count_) _type_ _name_[_count_] 

// ubo = std140, ssbo = std430
#define UNIFORM_UNIT(_set_, _binding_, _name_) layout(std140) uniform _name_ 
#define STORAGE_UNIT(_set_, _binding_, _access_, _name_) layout(std430) _access_ buffer _name_ 
#define SAMPLING_UNIT(_set_, _binding_, _type_, _name_) uniform _type_ _name_ 

OUT(0, vec4, sgl_rgba);

void main()
{
    sgl_rgba = vec4(0.5, 0.5, 0.5, 1.0);
}
avxPipeline 04bedb20 hardware-side data instanced.Hardware-side raster 002ed418 ready. de1, 8058, [952,506,1]Hardware-side raster 002ed4f0 ready. de1, 8cac, [952,506,1]avxCanvas 04be94d0 hardware-side data instanced.Hardware-side buffer 04c04b20 ready. 35345, 78, 10Hardware-side buffer 04c04d00 ready. 35345, 79, 10