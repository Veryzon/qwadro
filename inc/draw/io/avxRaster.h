/*
 *          ::::::::  :::       :::     :::     :::::::::  :::::::::   ::::::::
 *         :+:    :+: :+:       :+:   :+: :+:   :+:    :+: :+:    :+: :+:    :+:
 *         +:+    +:+ +:+       +:+  +:+   +:+  +:+    +:+ +:+    +:+ +:+    +:+
 *         +#+    +:+ +#+  +:+  +#+ +#++:++#++: +#+    +:+ +#++:++#:  +#+    +:+
 *         +#+  # +#+ +#+ +#+#+ +#+ +#+     +#+ +#+    +#+ +#+    +#+ +#+    +#+
 *         #+#   +#+   #+#+# #+#+#  #+#     #+# #+#    #+# #+#    #+# #+#    #+#
 *          ###### ###  ###   ###   ###     ### #########  ###    ###  ########
 *
 *        Q W A D R O   V I D E O   G R A P H I C S   I N F R A S T R U C T U R E
 *
 *                                   Public Test Build
 *                               (c) 2017 SIGMA FEDERATION
 *                             <https://sigmaco.org/qwadro/>
 */

  //////////////////////////////////////////////////////////////////////////////
 //// SIGMA GL/2                                                           ////
//////////////////////////////////////////////////////////////////////////////

// This code is part of SIGMA GL/2 <https://sigmaco.org/gl>

/*
    A list of function declarations related to raster operations in a graphics or rendering API, 
    likely related to the management and manipulation of raster data (such as textures or images) in a drawing system.

    These functions are used to interact with raster data in a graphics system, likely within a GPU or rendering context. 
    They include operations for testing usage and flags, querying properties, manipulating textures (or images), 
    and transferring data between the system and the GPU or storage.
*/

#ifndef AVX_RASTER_H
#define AVX_RASTER_H

#include "qwadro/inc/draw/io/avxFormat.h"
#include "qwadro/inc/io/afxUri.h"
#include "qwadro/inc/draw/op/avxSampler.h"
#include "qwadro/inc/math/afxWhd.h"
#include "qwadro/inc/draw/op/avxTransference.h"
#include "qwadro/inc/draw/math/avxViewport.h"
 
#define AVX_RASTER_ALIGNMENT (256)

typedef enum avxRasterUsage
{
    avxRasterUsage_SRC      = AFX_BIT(0), // The texture can be used as the source of a copy operation.
    avxRasterUsage_DST      = AFX_BIT(1), // The texture can be used as the destination of a copy or write operation.
    avxRasterUsage_TRANSFER = (avxRasterUsage_SRC | avxRasterUsage_DST),
    avxRasterUsage_RESAMPLE = AFX_BIT(2), // The texture can be bound for use as a sampled texture in a shader.
    avxRasterUsage_STORAGE  = AFX_BIT(3), // The texture can be bound for use as a storage texture in a shader.
    avxRasterUsage_DRAW     = AFX_BIT(4), // The texture can be used as a color or depth/stencil attachment in a draw scope.
    avxRasterUsage_VIDEO    = (avxRasterUsage_RESAMPLE | avxRasterUsage_DRAW),

    avxRasterUsage_ALL      = avxRasterUsage_TRANSFER | avxRasterUsage_RESAMPLE | avxRasterUsage_STORAGE | avxRasterUsage_DRAW,
} avxRasterUsage;

typedef enum avxRasterFlag
{
    avxRasterFlag_LAYERED   = AFX_BIT(0), // has more than 1 layer/slice (or a set of them, in case of cubemap).
    avxRasterFlag_MIPMAP    = AFX_BIT(1), // has more than 1 LOD, which are subsamples from base image; (aka mipmaps).
    avxRasterFlag_UPSAMPLED = AFX_BIT(2), // has more than 1 LOD, which are supersamples from base image; (aka multisample).
    avxRasterFlag_CUBEMAP   = AFX_BIT(3), // is one or more maps of a cubemapping texture.
    
    // autogenerated by acquisition if omitted.
    avxRasterFlag_1D        = AFX_BIT(4), // expands only into its width as a linear buffer.
    avxRasterFlag_2D        = AFX_BIT(5), // a common rectangular image.
    avxRasterFlag_3D        = AFX_BIT(6), // depth is not layer but volumetric extent.

#if !0
    avxRasterFlag_ROW_MAJOR = AFX_BIT(9), // specifies linear tiling (texels are laid out in memory in row-major order, possibly with some padding on each row).
    //avxRasterFlag_OPTIMAL = AFX_BIT(10), // specifies optimal tiling (texels are laid out in an implementation-dependent arrangement, for more efficient memory access).    
#endif
} avxRasterFlags;

AFX_DEFINE_STRUCT(avxRasterLayout)
/// Information about the layout of the raster subresource.
{
    afxSize         offset; // the byte offset from the start of the raster or the plane where the raster subresource begins.
    afxUnit         size; // the size in bytes of the raster subresource. siz includes any extra memory that is required based on rowStride.
    afxUnit         rowStride; // the number of bytes between each row of texels in an raster.
    afxUnit         imgStride; //  the number of bytes between each layer or (3D) slice of an raster.
};

AFX_DEFINE_STRUCT(avxRasterInfo)
{
    avxFormat       fmt;
    afxUnit         lodCnt; // mipmaps or supersamples, depending on flags. Default is mipmap.
    avxRange        extent;
    avxRasterUsage  usage;
    avxRasterFlags  flags;

    afxUnit         exuIdx;
    
    // subresourcing
    avxRaster       base;
    afxUnit         baseLod;
    afxUnit         baseLayer;
    avxSwizzling    swizzle;

    void*           udd;
    afxString       tag;
};

// LOD is mip level or sample level, depending on raster

/*
    The AvxTestRasterUsage() function tests the usage flags of a raster and 
    returns whether the raster is used in specific ways defined by the mask.
*/

AVX avxRasterUsage  AvxTestRasterUsage(avxRaster ras, avxRasterUsage mask);

/*
    The AvxTestRasterFlags() function tests specific flags (probably for state or attributes) of the raster and 
    returns whether those flags are set.
*/

AVX avxRasterFlags  AvxTestRasterFlags(avxRaster ras, avxRasterFlags mask);

/*
    The AvxDescribeRaster() function provides detailed information about the raster, 
    storing the result in the provided avxRasterInfo structure.
*/

AVX void AvxDescribeRaster(avxRaster ras, avxRasterInfo* desc);

/*
    The AvxGetRasterFormat() function returns the format of the raster (e.g., pixel format, bit depth).
*/

AVX avxFormat AvxGetRasterFormat(avxRaster ras);

/*
    The AvxDescribeRasterFormat() function describes the raster's format capabilites in a given bridge.
*/

AVX avxFormat AvxDescribeRasterFormat(avxRaster ras, afxUnit exuIdx, avxFormatDescription* pfd);

/*
    The AvxGetRasterExtent() function retrieves the extent (size or dimensions) of a raster at a particular 
    level of detail (LOD), specified by lodIdx.
*/

AVX avxRange AvxGetRasterExtent(avxRaster ras, afxUnit lodIdx);

/*
    The AvxGetRasterSwizzling() function gets the color swizzling for a given sub-index of a raster (typically for GPU color format mapping).
*/

AVX void AvxGetRasterSwizzling(avxRaster ras, avxSwizzling* csw);

/*
    The AvxQueryRasterLayout() function queries the layout of a raster at a given LOD and layer index, potentially for more detailed memory access patterns.
*/

AVX afxBool AvxQueryRasterLayout(avxRaster ras, afxUnit lodIdx, afxUnit layerIdx, avxRasterLayout* layout);

  //////////////////////////////////////////////////////////////////////////////
 // RASTER INPUT/OUTPUT METHODS                                              //
//////////////////////////////////////////////////////////////////////////////

/*
    The AvxPackRaster() function packs raster data into a buffer for efficient memory transfer to device-local memory.
*/

// Pack/unpack raster data to/from device-local memory buffer.
AVX afxError AvxPackRaster(avxRaster ras, afxUnit opCnt, avxRasterIo const ops[], afxUnit exuIdx, avxBuffer buf);

/*
    The AvxUnpackRaster() function unpacks raster data from a device-local memory buffer back into the appropriate format for use.
*/

AVX afxError AvxUnpackRaster(avxRaster ras, afxUnit opCnt, avxRasterIo const ops[], afxUnit exuIdx, avxBuffer buf);

/*
    The AvxDumpRaster() function dumps raster data into a raw destination (possibly a host memory region), typically for copying purposes.
*/

AVX afxError AvxDumpRaster(avxRaster ras, afxUnit opCnt, avxRasterIo const ops[], afxUnit exuIdx, void* dst);

/*
    The AvxUpdateRaster() function updates raster data from a source buffer or memory location.
*/

AVX afxError AvxUpdateRaster(avxRaster ras, afxUnit opCnt, avxRasterIo const ops[], afxUnit exuIdx, void const* src);

/*
    The AvxUploadRaster() function streams raster data into the system or device from an external stream (likely for loading).
*/

AVX afxError AvxUploadRaster(avxRaster ras, afxUnit opCnt, avxRasterIo const ops[], afxUnit exuIdx, afxStream in);

/*
    The AvxDownloadRaster() function downloads raster data from the system or device to an external stream.
*/

AVX afxError AvxDownloadRaster(avxRaster ras, afxUnit opCnt, avxRasterIo const ops[], afxUnit exuIdx, afxStream out);

/*
    The AvxPrintRaster() function outputs raster data to a file or URI, likely for saving or exporting the raster.
*/

AVX afxError AvxPrintRaster(avxRaster ras, avxRasterIo const* iop, afxUnit lodCnt, afxUnit exuIdx, afxUri const* uri);

/*
    The AvxFetchRaster() function reloads or fetches raster data from a specified URI (possibly fetching a texture or other raster asset).
*/

AVX afxError AvxFetchRaster(avxRaster ras, afxUnit opCnt, avxRasterIo const ops[], afxUnit lodCnt, afxUnit exuIdx, afxUri const* uri); // reload

////////////////////////////////////////////////////////////////////////////////

/*
    The AvxAcquireRasters() function acquires multiple rasters (textures or images) for use in a drawing system, based on the provided avxRasterInfo.
*/

AVX afxError AvxAcquireRasters(afxDrawSystem dsys, afxUnit cnt, avxRasterInfo const info[], avxRaster rasters[]);

/*
    The AvxLoadRasters() function loads multiple rasters from specified URIs into a drawing system.
*/

AVX afxError AvxLoadRasters(afxDrawSystem dsys, afxUnit cnt, avxRasterInfo const info[], afxUri const uri[], avxRaster rasters[]);

/*
    The AvxLoadCubemapRaster() function loads a cubemap (six textures for the six sides of a cube) into the drawing system from the given URIs.
*/

AVX avxRaster AvxLoadCubemapRaster(afxDrawSystem dsys, avxRasterInfo const* info, afxUri const* dir, afxUri const faces[6]);

#endif//AVX_RASTER_H
